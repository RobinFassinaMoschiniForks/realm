# Types and Definitions for Credentials

enum CredentialKind {
  PASSWORD
  KEY
  CERTIFICATE
}

type Credential implements Node {
  id: ID!
  principal: String!
  secret: String!
  kind: CredentialKind!

  target: Target!
}

enum CredentialOrderField {
  PRINCIPAL
  SECRET
  KIND
}

input CredentialOrder {
  direction: OrderDirection!
  field: CredentialOrderField
}

type CredentialEdge {
  node: Credential
  cursor: Cursor!
}

type CredentialConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CredentialEdge]
}
"""
CredentialWhereInput is used for filtering Credential objects.
Input was generated by ent.
"""
input CredentialWhereInput {
  not: CredentialWhereInput
  and: [CredentialWhereInput!]
  or: [CredentialWhereInput!]
  
  """principal field predicates"""
  principal: String
  principalNEQ: String
  principalIn: [String!]
  principalNotIn: [String!]
  principalGT: String
  principalGTE: String
  principalLT: String
  principalLTE: String
  principalContains: String
  principalHasPrefix: String
  principalHasSuffix: String
  principalEqualFold: String
  principalContainsFold: String
  
  """secret field predicates"""
  secret: String
  secretNEQ: String
  secretIn: [String!]
  secretNotIn: [String!]
  secretGT: String
  secretGTE: String
  secretLT: String
  secretLTE: String
  secretContains: String
  secretHasPrefix: String
  secretHasSuffix: String
  secretEqualFold: String
  secretContainsFold: String
  
  """kind field predicates"""
  kind: CredentialKind
  kindNEQ: CredentialKind
  kindIn: [CredentialKind!]
  kindNotIn: [CredentialKind!]
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """target edge predicates"""
  hasTarget: Boolean
  hasTargetWith: [TargetWhereInput!]
}

"""
TargetWhereInput is used for filtering Target objects.
Input was generated by ent.
"""
input TargetWhereInput {
  not: TargetWhereInput
  and: [TargetWhereInput!]
  or: [TargetWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """forwardConnectIP field predicates"""
  forwardconnectip: String
  forwardconnectipNEQ: String
  forwardconnectipIn: [String!]
  forwardconnectipNotIn: [String!]
  forwardconnectipGT: String
  forwardconnectipGTE: String
  forwardconnectipLT: String
  forwardconnectipLTE: String
  forwardconnectipContains: String
  forwardconnectipHasPrefix: String
  forwardconnectipHasSuffix: String
  forwardconnectipEqualFold: String
  forwardconnectipContainsFold: String
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  
  """credentials edge predicates"""
  hasCredentials: Boolean
  hasCredentialsWith: [CredentialWhereInput!]
}

"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
  not: FileWhereInput
  and: [FileWhereInput!]
  or: [FileWhereInput!]
  
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  
  """size field predicates"""
  size: Int
  sizeNEQ: Int
  sizeIn: [Int!]
  sizeNotIn: [Int!]
  sizeGT: Int
  sizeGTE: Int
  sizeLT: Int
  sizeLTE: Int
  
  """hash field predicates"""
  hash: String
  hashNEQ: String
  hashIn: [String!]
  hashNotIn: [String!]
  hashGT: String
  hashGTE: String
  hashLT: String
  hashLTE: String
  hashContains: String
  hashHasPrefix: String
  hashHasSuffix: String
  hashEqualFold: String
  hashContainsFold: String
  
  """createdAt field predicates"""
  createdat: Time
  createdatNEQ: Time
  createdatIn: [Time!]
  createdatNotIn: [Time!]
  createdatGT: Time
  createdatGTE: Time
  createdatLT: Time
  createdatLTE: Time
  
  """lastModifiedAt field predicates"""
  lastmodifiedat: Time
  lastmodifiedatNEQ: Time
  lastmodifiedatIn: [Time!]
  lastmodifiedatNotIn: [Time!]
  lastmodifiedatGT: Time
  lastmodifiedatGTE: Time
  lastmodifiedatLT: Time
  lastmodifiedatLTE: Time
  
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}
# Types and Definitions for Files

type File implements Node {
  id: ID!
  name: String!
  size: Int!
  hash: String!
  createdAt: Time!
  lastModifiedAt: Time!
}

enum FileOrderField {
    NAME
    SIZE
    CREATED_AT
    LAST_MODIFIED_AT
}

input FileOrder {
  direction: OrderDirection!
  field: FileOrderField
}

type FileEdge {
  node: File
  cursor: Cursor!
}

type FileConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [FileEdge]
}
type ImplantCallbackConfig implements Node {
    id: ID!
    uri: String!
    priority: Int!
    timeout: Int!
    interval: Int!
    jitter: Int!
}

type ImplantServiceConfig implements Node {
    id: ID!
    name: String!
    description: String!
    executablePath: String!
}

type ImplantConfig implements Node {
  id: ID!
  name: String!
  authToken: String!

  serviceConfigs: [ImplantServiceConfig!]
  callbackConfigs: [ImplantCallbackConfig!]
}

type Implant implements Node {
  id: ID!
  sessionID: String!
  processName: String

  target: Target!
  config: ImplantConfig!
}# Schema for all mutations that the Graph API supports.

type Mutation {
  createTarget(target: CreateTargetInput!): Target!
  createCredential(credential: CreateCredentialInput!): Credential!
}

input CreateTargetInput {
    name: String!
    forwardConnectIP: String!
}

input CreateCredentialInput {
    principal: String!
    secret: String!
    kind: CredentialKind!
    targetID: ID!
}

# Schema for all queries that the Graph API supports.

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  targets(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: TargetOrder, where: TargetWhereInput): TargetConnection
  credentials(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: CredentialOrder, where: CredentialWhereInput): CredentialConnection
  files(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: FileOrder, where: FileWhereInput): FileConnection
}# This schema has general types and definititions required by relay
# See https://relay.dev/graphql/connections.htm

interface Node {
  id: ID!
}

scalar Cursor

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

enum OrderDirection {
  ASC
  DESC
}# Types and Definitions for Targets

type Target implements Node {
  id: ID!
  name: String!
  forwardConnectIP: String!

  credentials: [Credential!]
}

enum TargetOrderField {
  NAME
  FORWARD_CONNECT_IP
}

input TargetOrder {
  direction: OrderDirection!
  field: TargetOrderField
}

type TargetEdge {
  node: Target
  cursor: Cursor!
}

type TargetConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TargetEdge]
}
# Common Golang Type Definitions

scalar Time
