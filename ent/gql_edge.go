// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (c *Credential) Target(ctx context.Context) (*Target, error) {
	result, err := c.Edges.TargetOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryTarget().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Implant) Target(ctx context.Context) (*Target, error) {
	result, err := i.Edges.TargetOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryTarget().Only(ctx)
	}
	return result, err
}

func (i *Implant) Config(ctx context.Context) (*ImplantConfig, error) {
	result, err := i.Edges.ConfigOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryConfig().Only(ctx)
	}
	return result, err
}

func (icc *ImplantCallbackConfig) ImplantConfigs(ctx context.Context) ([]*ImplantConfig, error) {
	result, err := icc.Edges.ImplantConfigsOrErr()
	if IsNotLoaded(err) {
		result, err = icc.QueryImplantConfigs().All(ctx)
	}
	return result, err
}

func (ic *ImplantConfig) Implants(ctx context.Context) ([]*Implant, error) {
	result, err := ic.Edges.ImplantsOrErr()
	if IsNotLoaded(err) {
		result, err = ic.QueryImplants().All(ctx)
	}
	return result, err
}

func (ic *ImplantConfig) ServiceConfigs(ctx context.Context) ([]*ImplantServiceConfig, error) {
	result, err := ic.Edges.ServiceConfigsOrErr()
	if IsNotLoaded(err) {
		result, err = ic.QueryServiceConfigs().All(ctx)
	}
	return result, err
}

func (ic *ImplantConfig) CallbackConfigs(ctx context.Context) ([]*ImplantCallbackConfig, error) {
	result, err := ic.Edges.CallbackConfigsOrErr()
	if IsNotLoaded(err) {
		result, err = ic.QueryCallbackConfigs().All(ctx)
	}
	return result, err
}

func (isc *ImplantServiceConfig) ImplantConfigs(ctx context.Context) ([]*ImplantConfig, error) {
	result, err := isc.Edges.ImplantConfigsOrErr()
	if IsNotLoaded(err) {
		result, err = isc.QueryImplantConfigs().All(ctx)
	}
	return result, err
}

func (t *Target) Credentials(ctx context.Context) ([]*Credential, error) {
	result, err := t.Edges.CredentialsOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryCredentials().All(ctx)
	}
	return result, err
}

func (t *Target) Implants(ctx context.Context) ([]*Implant, error) {
	result, err := t.Edges.ImplantsOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryImplants().All(ctx)
	}
	return result, err
}
