// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/kcarretto/realm/ent/credential"
)

// Credential is the model entity for the Credential schema.
type Credential struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Principal holds the value of the "principal" field.
	// The principal for the Credential (e.g. username)
	Principal string `json:"principal,omitempty"`
	// Secret holds the value of the "secret" field.
	// The secret for the Credential (e.g. password)
	Secret string `json:"secret,omitempty"`
	// Kind holds the value of the "kind" field.
	// The kind of the credential (password, key, etc)
	Kind credential.Kind `json:"kind,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Credential) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case credential.FieldID:
			values[i] = new(sql.NullInt64)
		case credential.FieldPrincipal, credential.FieldSecret, credential.FieldKind:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Credential", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Credential fields.
func (c *Credential) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case credential.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case credential.FieldPrincipal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field principal", values[i])
			} else if value.Valid {
				c.Principal = value.String
			}
		case credential.FieldSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value.Valid {
				c.Secret = value.String
			}
		case credential.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				c.Kind = credential.Kind(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Credential.
// Note that you need to call Credential.Unwrap() before calling this method if this Credential
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Credential) Update() *CredentialUpdateOne {
	return (&CredentialClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Credential entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Credential) Unwrap() *Credential {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Credential is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Credential) String() string {
	var builder strings.Builder
	builder.WriteString("Credential(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", principal=")
	builder.WriteString(c.Principal)
	builder.WriteString(", secret=")
	builder.WriteString(c.Secret)
	builder.WriteString(", kind=")
	builder.WriteString(fmt.Sprintf("%v", c.Kind))
	builder.WriteByte(')')
	return builder.String()
}

// Credentials is a parsable slice of Credential.
type Credentials []*Credential

func (c Credentials) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
