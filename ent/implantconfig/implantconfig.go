// Code generated by entc, DO NOT EDIT.

package implantconfig

const (
	// Label holds the string label denoting the implantconfig type in the database.
	Label = "implant_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAuthToken holds the string denoting the authtoken field in the database.
	FieldAuthToken = "auth_token"
	// EdgeDeploymentConfigs holds the string denoting the deploymentconfigs edge name in mutations.
	EdgeDeploymentConfigs = "deploymentConfigs"
	// EdgeImplants holds the string denoting the implants edge name in mutations.
	EdgeImplants = "implants"
	// EdgeServiceConfigs holds the string denoting the serviceconfigs edge name in mutations.
	EdgeServiceConfigs = "serviceConfigs"
	// EdgeCallbackConfigs holds the string denoting the callbackconfigs edge name in mutations.
	EdgeCallbackConfigs = "callbackConfigs"
	// Table holds the table name of the implantconfig in the database.
	Table = "implant_configs"
	// DeploymentConfigsTable is the table that holds the deploymentConfigs relation/edge.
	DeploymentConfigsTable = "deployment_configs"
	// DeploymentConfigsInverseTable is the table name for the DeploymentConfig entity.
	// It exists in this package in order to avoid circular dependency with the "deploymentconfig" package.
	DeploymentConfigsInverseTable = "deployment_configs"
	// DeploymentConfigsColumn is the table column denoting the deploymentConfigs relation/edge.
	DeploymentConfigsColumn = "deployment_config_implant_config"
	// ImplantsTable is the table that holds the implants relation/edge.
	ImplantsTable = "implants"
	// ImplantsInverseTable is the table name for the Implant entity.
	// It exists in this package in order to avoid circular dependency with the "implant" package.
	ImplantsInverseTable = "implants"
	// ImplantsColumn is the table column denoting the implants relation/edge.
	ImplantsColumn = "implant_config"
	// ServiceConfigsTable is the table that holds the serviceConfigs relation/edge. The primary key declared below.
	ServiceConfigsTable = "implant_config_serviceConfigs"
	// ServiceConfigsInverseTable is the table name for the ImplantServiceConfig entity.
	// It exists in this package in order to avoid circular dependency with the "implantserviceconfig" package.
	ServiceConfigsInverseTable = "implant_service_configs"
	// CallbackConfigsTable is the table that holds the callbackConfigs relation/edge. The primary key declared below.
	CallbackConfigsTable = "implant_config_callbackConfigs"
	// CallbackConfigsInverseTable is the table name for the ImplantCallbackConfig entity.
	// It exists in this package in order to avoid circular dependency with the "implantcallbackconfig" package.
	CallbackConfigsInverseTable = "implant_callback_configs"
)

// Columns holds all SQL columns for implantconfig fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAuthToken,
}

var (
	// ServiceConfigsPrimaryKey and ServiceConfigsColumn2 are the table columns denoting the
	// primary key for the serviceConfigs relation (M2M).
	ServiceConfigsPrimaryKey = []string{"implant_config_id", "implant_service_config_id"}
	// CallbackConfigsPrimaryKey and CallbackConfigsColumn2 are the table columns denoting the
	// primary key for the callbackConfigs relation (M2M).
	CallbackConfigsPrimaryKey = []string{"implant_config_id", "implant_callback_config_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultAuthToken holds the default value on creation for the "authToken" field.
	DefaultAuthToken func() string
)
