// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/kcarretto/realm/ent/implantcallbackconfig"
)

// ImplantCallbackConfig is the model entity for the ImplantCallbackConfig schema.
type ImplantCallbackConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URI holds the value of the "uri" field.
	// URI the implant should use for checking in.
	URI string `json:"uri,omitempty"`
	// ProxyURI holds the value of the "proxyURI" field.
	// Proxy URI the implant should use for checking in.
	ProxyURI string `json:"proxyURI,omitempty"`
	// Priority holds the value of the "priority" field.
	// The priority of using this callback config (lower is better).
	Priority int `json:"priority,omitempty"`
	// Timeout holds the value of the "timeout" field.
	// The maximum time to wait before attempting the next callback config (seconds).
	Timeout int `json:"timeout,omitempty"`
	// Interval holds the value of the "interval" field.
	// The maximum duration between callbacks (seconds).
	Interval int `json:"interval,omitempty"`
	// Jitter holds the value of the "jitter" field.
	// The maximum random splay to subtract from the callback interval (seconds).
	Jitter int `json:"jitter,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImplantCallbackConfigQuery when eager-loading is set.
	Edges ImplantCallbackConfigEdges `json:"edges"`
}

// ImplantCallbackConfigEdges holds the relations/edges for other nodes in the graph.
type ImplantCallbackConfigEdges struct {
	// ImplantConfigs holds the value of the implantConfigs edge.
	ImplantConfigs []*ImplantConfig `json:"implantConfigs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ImplantConfigsOrErr returns the ImplantConfigs value or an error if the edge
// was not loaded in eager-loading.
func (e ImplantCallbackConfigEdges) ImplantConfigsOrErr() ([]*ImplantConfig, error) {
	if e.loadedTypes[0] {
		return e.ImplantConfigs, nil
	}
	return nil, &NotLoadedError{edge: "implantConfigs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImplantCallbackConfig) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case implantcallbackconfig.FieldID, implantcallbackconfig.FieldPriority, implantcallbackconfig.FieldTimeout, implantcallbackconfig.FieldInterval, implantcallbackconfig.FieldJitter:
			values[i] = new(sql.NullInt64)
		case implantcallbackconfig.FieldURI, implantcallbackconfig.FieldProxyURI:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ImplantCallbackConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImplantCallbackConfig fields.
func (icc *ImplantCallbackConfig) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case implantcallbackconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			icc.ID = int(value.Int64)
		case implantcallbackconfig.FieldURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uri", values[i])
			} else if value.Valid {
				icc.URI = value.String
			}
		case implantcallbackconfig.FieldProxyURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field proxyURI", values[i])
			} else if value.Valid {
				icc.ProxyURI = value.String
			}
		case implantcallbackconfig.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				icc.Priority = int(value.Int64)
			}
		case implantcallbackconfig.FieldTimeout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout", values[i])
			} else if value.Valid {
				icc.Timeout = int(value.Int64)
			}
		case implantcallbackconfig.FieldInterval:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interval", values[i])
			} else if value.Valid {
				icc.Interval = int(value.Int64)
			}
		case implantcallbackconfig.FieldJitter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field jitter", values[i])
			} else if value.Valid {
				icc.Jitter = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryImplantConfigs queries the "implantConfigs" edge of the ImplantCallbackConfig entity.
func (icc *ImplantCallbackConfig) QueryImplantConfigs() *ImplantConfigQuery {
	return (&ImplantCallbackConfigClient{config: icc.config}).QueryImplantConfigs(icc)
}

// Update returns a builder for updating this ImplantCallbackConfig.
// Note that you need to call ImplantCallbackConfig.Unwrap() before calling this method if this ImplantCallbackConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (icc *ImplantCallbackConfig) Update() *ImplantCallbackConfigUpdateOne {
	return (&ImplantCallbackConfigClient{config: icc.config}).UpdateOne(icc)
}

// Unwrap unwraps the ImplantCallbackConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (icc *ImplantCallbackConfig) Unwrap() *ImplantCallbackConfig {
	tx, ok := icc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ImplantCallbackConfig is not a transactional entity")
	}
	icc.config.driver = tx.drv
	return icc
}

// String implements the fmt.Stringer.
func (icc *ImplantCallbackConfig) String() string {
	var builder strings.Builder
	builder.WriteString("ImplantCallbackConfig(")
	builder.WriteString(fmt.Sprintf("id=%v", icc.ID))
	builder.WriteString(", uri=")
	builder.WriteString(icc.URI)
	builder.WriteString(", proxyURI=")
	builder.WriteString(icc.ProxyURI)
	builder.WriteString(", priority=")
	builder.WriteString(fmt.Sprintf("%v", icc.Priority))
	builder.WriteString(", timeout=")
	builder.WriteString(fmt.Sprintf("%v", icc.Timeout))
	builder.WriteString(", interval=")
	builder.WriteString(fmt.Sprintf("%v", icc.Interval))
	builder.WriteString(", jitter=")
	builder.WriteString(fmt.Sprintf("%v", icc.Jitter))
	builder.WriteByte(')')
	return builder.String()
}

// ImplantCallbackConfigs is a parsable slice of ImplantCallbackConfig.
type ImplantCallbackConfigs []*ImplantCallbackConfig

func (icc ImplantCallbackConfigs) config(cfg config) {
	for _i := range icc {
		icc[_i].config = cfg
	}
}
