// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/kcarretto/realm/ent/credential"
	"github.com/kcarretto/realm/ent/deployment"
	"github.com/kcarretto/realm/ent/deploymentconfig"
	"github.com/kcarretto/realm/ent/file"
	"github.com/kcarretto/realm/ent/implant"
	"github.com/kcarretto/realm/ent/implantcallbackconfig"
	"github.com/kcarretto/realm/ent/implantconfig"
	"github.com/kcarretto/realm/ent/implantserviceconfig"
	"github.com/kcarretto/realm/ent/tag"
	"github.com/kcarretto/realm/ent/target"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// CredentialEdge is the edge representation of Credential.
type CredentialEdge struct {
	Node   *Credential `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// CredentialConnection is the connection containing edges to Credential.
type CredentialConnection struct {
	Edges      []*CredentialEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

// CredentialPaginateOption enables pagination customization.
type CredentialPaginateOption func(*credentialPager) error

// WithCredentialOrder configures pagination ordering.
func WithCredentialOrder(order *CredentialOrder) CredentialPaginateOption {
	if order == nil {
		order = DefaultCredentialOrder
	}
	o := *order
	return func(pager *credentialPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCredentialOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCredentialFilter configures pagination filter.
func WithCredentialFilter(filter func(*CredentialQuery) (*CredentialQuery, error)) CredentialPaginateOption {
	return func(pager *credentialPager) error {
		if filter == nil {
			return errors.New("CredentialQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type credentialPager struct {
	order  *CredentialOrder
	filter func(*CredentialQuery) (*CredentialQuery, error)
}

func newCredentialPager(opts []CredentialPaginateOption) (*credentialPager, error) {
	pager := &credentialPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCredentialOrder
	}
	return pager, nil
}

func (p *credentialPager) applyFilter(query *CredentialQuery) (*CredentialQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *credentialPager) toCursor(c *Credential) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *credentialPager) applyCursors(query *CredentialQuery, after, before *Cursor) *CredentialQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultCredentialOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *credentialPager) applyOrder(query *CredentialQuery, reverse bool) *CredentialQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultCredentialOrder.Field {
		query = query.Order(direction.orderFunc(DefaultCredentialOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Credential.
func (c *CredentialQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CredentialPaginateOption,
) (*CredentialConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCredentialPager(opts)
	if err != nil {
		return nil, err
	}

	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}

	conn := &CredentialConnection{Edges: []*CredentialEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := c.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := c.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		c = c.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := c.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Credential
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Credential {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Credential {
			return nodes[i]
		}
	}

	conn.Edges = make([]*CredentialEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &CredentialEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// CredentialOrderFieldPrincipal orders Credential by principal.
	CredentialOrderFieldPrincipal = &CredentialOrderField{
		field: credential.FieldPrincipal,
		toCursor: func(c *Credential) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Principal,
			}
		},
	}
	// CredentialOrderFieldSecret orders Credential by secret.
	CredentialOrderFieldSecret = &CredentialOrderField{
		field: credential.FieldSecret,
		toCursor: func(c *Credential) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Secret,
			}
		},
	}
	// CredentialOrderFieldKind orders Credential by kind.
	CredentialOrderFieldKind = &CredentialOrderField{
		field: credential.FieldKind,
		toCursor: func(c *Credential) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.Kind,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CredentialOrderField) String() string {
	var str string
	switch f.field {
	case credential.FieldPrincipal:
		str = "PRINCIPAL"
	case credential.FieldSecret:
		str = "SECRET"
	case credential.FieldKind:
		str = "KIND"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CredentialOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CredentialOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CredentialOrderField %T must be a string", v)
	}
	switch str {
	case "PRINCIPAL":
		*f = *CredentialOrderFieldPrincipal
	case "SECRET":
		*f = *CredentialOrderFieldSecret
	case "KIND":
		*f = *CredentialOrderFieldKind
	default:
		return fmt.Errorf("%s is not a valid CredentialOrderField", str)
	}
	return nil
}

// CredentialOrderField defines the ordering field of Credential.
type CredentialOrderField struct {
	field    string
	toCursor func(*Credential) Cursor
}

// CredentialOrder defines the ordering of Credential.
type CredentialOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *CredentialOrderField `json:"field"`
}

// DefaultCredentialOrder is the default ordering of Credential.
var DefaultCredentialOrder = &CredentialOrder{
	Direction: OrderDirectionAsc,
	Field: &CredentialOrderField{
		field: credential.FieldID,
		toCursor: func(c *Credential) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Credential into CredentialEdge.
func (c *Credential) ToEdge(order *CredentialOrder) *CredentialEdge {
	if order == nil {
		order = DefaultCredentialOrder
	}
	return &CredentialEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// DeploymentEdge is the edge representation of Deployment.
type DeploymentEdge struct {
	Node   *Deployment `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// DeploymentConnection is the connection containing edges to Deployment.
type DeploymentConnection struct {
	Edges      []*DeploymentEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

// DeploymentPaginateOption enables pagination customization.
type DeploymentPaginateOption func(*deploymentPager) error

// WithDeploymentOrder configures pagination ordering.
func WithDeploymentOrder(order *DeploymentOrder) DeploymentPaginateOption {
	if order == nil {
		order = DefaultDeploymentOrder
	}
	o := *order
	return func(pager *deploymentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDeploymentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDeploymentFilter configures pagination filter.
func WithDeploymentFilter(filter func(*DeploymentQuery) (*DeploymentQuery, error)) DeploymentPaginateOption {
	return func(pager *deploymentPager) error {
		if filter == nil {
			return errors.New("DeploymentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type deploymentPager struct {
	order  *DeploymentOrder
	filter func(*DeploymentQuery) (*DeploymentQuery, error)
}

func newDeploymentPager(opts []DeploymentPaginateOption) (*deploymentPager, error) {
	pager := &deploymentPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDeploymentOrder
	}
	return pager, nil
}

func (p *deploymentPager) applyFilter(query *DeploymentQuery) (*DeploymentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *deploymentPager) toCursor(d *Deployment) Cursor {
	return p.order.Field.toCursor(d)
}

func (p *deploymentPager) applyCursors(query *DeploymentQuery, after, before *Cursor) *DeploymentQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultDeploymentOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *deploymentPager) applyOrder(query *DeploymentQuery, reverse bool) *DeploymentQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultDeploymentOrder.Field {
		query = query.Order(direction.orderFunc(DefaultDeploymentOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Deployment.
func (d *DeploymentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DeploymentPaginateOption,
) (*DeploymentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDeploymentPager(opts)
	if err != nil {
		return nil, err
	}

	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}

	conn := &DeploymentConnection{Edges: []*DeploymentEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := d.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := d.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	d = pager.applyCursors(d, after, before)
	d = pager.applyOrder(d, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		d = d.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		d = d.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := d.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Deployment
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Deployment {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Deployment {
			return nodes[i]
		}
	}

	conn.Edges = make([]*DeploymentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &DeploymentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// DeploymentOrderField defines the ordering field of Deployment.
type DeploymentOrderField struct {
	field    string
	toCursor func(*Deployment) Cursor
}

// DeploymentOrder defines the ordering of Deployment.
type DeploymentOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *DeploymentOrderField `json:"field"`
}

// DefaultDeploymentOrder is the default ordering of Deployment.
var DefaultDeploymentOrder = &DeploymentOrder{
	Direction: OrderDirectionAsc,
	Field: &DeploymentOrderField{
		field: deployment.FieldID,
		toCursor: func(d *Deployment) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts Deployment into DeploymentEdge.
func (d *Deployment) ToEdge(order *DeploymentOrder) *DeploymentEdge {
	if order == nil {
		order = DefaultDeploymentOrder
	}
	return &DeploymentEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// DeploymentConfigEdge is the edge representation of DeploymentConfig.
type DeploymentConfigEdge struct {
	Node   *DeploymentConfig `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// DeploymentConfigConnection is the connection containing edges to DeploymentConfig.
type DeploymentConfigConnection struct {
	Edges      []*DeploymentConfigEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

// DeploymentConfigPaginateOption enables pagination customization.
type DeploymentConfigPaginateOption func(*deploymentConfigPager) error

// WithDeploymentConfigOrder configures pagination ordering.
func WithDeploymentConfigOrder(order *DeploymentConfigOrder) DeploymentConfigPaginateOption {
	if order == nil {
		order = DefaultDeploymentConfigOrder
	}
	o := *order
	return func(pager *deploymentConfigPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDeploymentConfigOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDeploymentConfigFilter configures pagination filter.
func WithDeploymentConfigFilter(filter func(*DeploymentConfigQuery) (*DeploymentConfigQuery, error)) DeploymentConfigPaginateOption {
	return func(pager *deploymentConfigPager) error {
		if filter == nil {
			return errors.New("DeploymentConfigQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type deploymentConfigPager struct {
	order  *DeploymentConfigOrder
	filter func(*DeploymentConfigQuery) (*DeploymentConfigQuery, error)
}

func newDeploymentConfigPager(opts []DeploymentConfigPaginateOption) (*deploymentConfigPager, error) {
	pager := &deploymentConfigPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDeploymentConfigOrder
	}
	return pager, nil
}

func (p *deploymentConfigPager) applyFilter(query *DeploymentConfigQuery) (*DeploymentConfigQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *deploymentConfigPager) toCursor(dc *DeploymentConfig) Cursor {
	return p.order.Field.toCursor(dc)
}

func (p *deploymentConfigPager) applyCursors(query *DeploymentConfigQuery, after, before *Cursor) *DeploymentConfigQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultDeploymentConfigOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *deploymentConfigPager) applyOrder(query *DeploymentConfigQuery, reverse bool) *DeploymentConfigQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultDeploymentConfigOrder.Field {
		query = query.Order(direction.orderFunc(DefaultDeploymentConfigOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to DeploymentConfig.
func (dc *DeploymentConfigQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DeploymentConfigPaginateOption,
) (*DeploymentConfigConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDeploymentConfigPager(opts)
	if err != nil {
		return nil, err
	}

	if dc, err = pager.applyFilter(dc); err != nil {
		return nil, err
	}

	conn := &DeploymentConfigConnection{Edges: []*DeploymentConfigEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := dc.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := dc.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	dc = pager.applyCursors(dc, after, before)
	dc = pager.applyOrder(dc, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		dc = dc.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		dc = dc.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := dc.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *DeploymentConfig
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *DeploymentConfig {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *DeploymentConfig {
			return nodes[i]
		}
	}

	conn.Edges = make([]*DeploymentConfigEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &DeploymentConfigEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// DeploymentConfigOrderField defines the ordering field of DeploymentConfig.
type DeploymentConfigOrderField struct {
	field    string
	toCursor func(*DeploymentConfig) Cursor
}

// DeploymentConfigOrder defines the ordering of DeploymentConfig.
type DeploymentConfigOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *DeploymentConfigOrderField `json:"field"`
}

// DefaultDeploymentConfigOrder is the default ordering of DeploymentConfig.
var DefaultDeploymentConfigOrder = &DeploymentConfigOrder{
	Direction: OrderDirectionAsc,
	Field: &DeploymentConfigOrderField{
		field: deploymentconfig.FieldID,
		toCursor: func(dc *DeploymentConfig) Cursor {
			return Cursor{ID: dc.ID}
		},
	},
}

// ToEdge converts DeploymentConfig into DeploymentConfigEdge.
func (dc *DeploymentConfig) ToEdge(order *DeploymentConfigOrder) *DeploymentConfigEdge {
	if order == nil {
		order = DefaultDeploymentConfigOrder
	}
	return &DeploymentConfigEdge{
		Node:   dc,
		Cursor: order.Field.toCursor(dc),
	}
}

// FileEdge is the edge representation of File.
type FileEdge struct {
	Node   *File  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// FileConnection is the connection containing edges to File.
type FileConnection struct {
	Edges      []*FileEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// FilePaginateOption enables pagination customization.
type FilePaginateOption func(*filePager) error

// WithFileOrder configures pagination ordering.
func WithFileOrder(order *FileOrder) FilePaginateOption {
	if order == nil {
		order = DefaultFileOrder
	}
	o := *order
	return func(pager *filePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFileOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFileFilter configures pagination filter.
func WithFileFilter(filter func(*FileQuery) (*FileQuery, error)) FilePaginateOption {
	return func(pager *filePager) error {
		if filter == nil {
			return errors.New("FileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type filePager struct {
	order  *FileOrder
	filter func(*FileQuery) (*FileQuery, error)
}

func newFilePager(opts []FilePaginateOption) (*filePager, error) {
	pager := &filePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFileOrder
	}
	return pager, nil
}

func (p *filePager) applyFilter(query *FileQuery) (*FileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *filePager) toCursor(f *File) Cursor {
	return p.order.Field.toCursor(f)
}

func (p *filePager) applyCursors(query *FileQuery, after, before *Cursor) *FileQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultFileOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *filePager) applyOrder(query *FileQuery, reverse bool) *FileQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultFileOrder.Field {
		query = query.Order(direction.orderFunc(DefaultFileOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to File.
func (f *FileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FilePaginateOption,
) (*FileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFilePager(opts)
	if err != nil {
		return nil, err
	}

	if f, err = pager.applyFilter(f); err != nil {
		return nil, err
	}

	conn := &FileConnection{Edges: []*FileEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := f.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := f.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	f = pager.applyCursors(f, after, before)
	f = pager.applyOrder(f, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		f = f.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		f = f.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := f.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *File
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *File {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *File {
			return nodes[i]
		}
	}

	conn.Edges = make([]*FileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &FileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// FileOrderFieldName orders File by name.
	FileOrderFieldName = &FileOrderField{
		field: file.FieldName,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Name,
			}
		},
	}
	// FileOrderFieldSize orders File by size.
	FileOrderFieldSize = &FileOrderField{
		field: file.FieldSize,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Size,
			}
		},
	}
	// FileOrderFieldCreatedAt orders File by createdAt.
	FileOrderFieldCreatedAt = &FileOrderField{
		field: file.FieldCreatedAt,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.CreatedAt,
			}
		},
	}
	// FileOrderFieldLastModifiedAt orders File by lastModifiedAt.
	FileOrderFieldLastModifiedAt = &FileOrderField{
		field: file.FieldLastModifiedAt,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.LastModifiedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f FileOrderField) String() string {
	var str string
	switch f.field {
	case file.FieldName:
		str = "NAME"
	case file.FieldSize:
		str = "SIZE"
	case file.FieldCreatedAt:
		str = "CREATED_AT"
	case file.FieldLastModifiedAt:
		str = "LAST_MODIFIED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f FileOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *FileOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("FileOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *FileOrderFieldName
	case "SIZE":
		*f = *FileOrderFieldSize
	case "CREATED_AT":
		*f = *FileOrderFieldCreatedAt
	case "LAST_MODIFIED_AT":
		*f = *FileOrderFieldLastModifiedAt
	default:
		return fmt.Errorf("%s is not a valid FileOrderField", str)
	}
	return nil
}

// FileOrderField defines the ordering field of File.
type FileOrderField struct {
	field    string
	toCursor func(*File) Cursor
}

// FileOrder defines the ordering of File.
type FileOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *FileOrderField `json:"field"`
}

// DefaultFileOrder is the default ordering of File.
var DefaultFileOrder = &FileOrder{
	Direction: OrderDirectionAsc,
	Field: &FileOrderField{
		field: file.FieldID,
		toCursor: func(f *File) Cursor {
			return Cursor{ID: f.ID}
		},
	},
}

// ToEdge converts File into FileEdge.
func (f *File) ToEdge(order *FileOrder) *FileEdge {
	if order == nil {
		order = DefaultFileOrder
	}
	return &FileEdge{
		Node:   f,
		Cursor: order.Field.toCursor(f),
	}
}

// ImplantEdge is the edge representation of Implant.
type ImplantEdge struct {
	Node   *Implant `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ImplantConnection is the connection containing edges to Implant.
type ImplantConnection struct {
	Edges      []*ImplantEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// ImplantPaginateOption enables pagination customization.
type ImplantPaginateOption func(*implantPager) error

// WithImplantOrder configures pagination ordering.
func WithImplantOrder(order *ImplantOrder) ImplantPaginateOption {
	if order == nil {
		order = DefaultImplantOrder
	}
	o := *order
	return func(pager *implantPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultImplantOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithImplantFilter configures pagination filter.
func WithImplantFilter(filter func(*ImplantQuery) (*ImplantQuery, error)) ImplantPaginateOption {
	return func(pager *implantPager) error {
		if filter == nil {
			return errors.New("ImplantQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type implantPager struct {
	order  *ImplantOrder
	filter func(*ImplantQuery) (*ImplantQuery, error)
}

func newImplantPager(opts []ImplantPaginateOption) (*implantPager, error) {
	pager := &implantPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultImplantOrder
	}
	return pager, nil
}

func (p *implantPager) applyFilter(query *ImplantQuery) (*ImplantQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *implantPager) toCursor(i *Implant) Cursor {
	return p.order.Field.toCursor(i)
}

func (p *implantPager) applyCursors(query *ImplantQuery, after, before *Cursor) *ImplantQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultImplantOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *implantPager) applyOrder(query *ImplantQuery, reverse bool) *ImplantQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultImplantOrder.Field {
		query = query.Order(direction.orderFunc(DefaultImplantOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Implant.
func (i *ImplantQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ImplantPaginateOption,
) (*ImplantConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newImplantPager(opts)
	if err != nil {
		return nil, err
	}

	if i, err = pager.applyFilter(i); err != nil {
		return nil, err
	}

	conn := &ImplantConnection{Edges: []*ImplantEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := i.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := i.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	i = pager.applyCursors(i, after, before)
	i = pager.applyOrder(i, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		i = i.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := i.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Implant
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Implant {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Implant {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ImplantEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ImplantEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ImplantOrderField defines the ordering field of Implant.
type ImplantOrderField struct {
	field    string
	toCursor func(*Implant) Cursor
}

// ImplantOrder defines the ordering of Implant.
type ImplantOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ImplantOrderField `json:"field"`
}

// DefaultImplantOrder is the default ordering of Implant.
var DefaultImplantOrder = &ImplantOrder{
	Direction: OrderDirectionAsc,
	Field: &ImplantOrderField{
		field: implant.FieldID,
		toCursor: func(i *Implant) Cursor {
			return Cursor{ID: i.ID}
		},
	},
}

// ToEdge converts Implant into ImplantEdge.
func (i *Implant) ToEdge(order *ImplantOrder) *ImplantEdge {
	if order == nil {
		order = DefaultImplantOrder
	}
	return &ImplantEdge{
		Node:   i,
		Cursor: order.Field.toCursor(i),
	}
}

// ImplantCallbackConfigEdge is the edge representation of ImplantCallbackConfig.
type ImplantCallbackConfigEdge struct {
	Node   *ImplantCallbackConfig `json:"node"`
	Cursor Cursor                 `json:"cursor"`
}

// ImplantCallbackConfigConnection is the connection containing edges to ImplantCallbackConfig.
type ImplantCallbackConfigConnection struct {
	Edges      []*ImplantCallbackConfigEdge `json:"edges"`
	PageInfo   PageInfo                     `json:"pageInfo"`
	TotalCount int                          `json:"totalCount"`
}

// ImplantCallbackConfigPaginateOption enables pagination customization.
type ImplantCallbackConfigPaginateOption func(*implantCallbackConfigPager) error

// WithImplantCallbackConfigOrder configures pagination ordering.
func WithImplantCallbackConfigOrder(order *ImplantCallbackConfigOrder) ImplantCallbackConfigPaginateOption {
	if order == nil {
		order = DefaultImplantCallbackConfigOrder
	}
	o := *order
	return func(pager *implantCallbackConfigPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultImplantCallbackConfigOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithImplantCallbackConfigFilter configures pagination filter.
func WithImplantCallbackConfigFilter(filter func(*ImplantCallbackConfigQuery) (*ImplantCallbackConfigQuery, error)) ImplantCallbackConfigPaginateOption {
	return func(pager *implantCallbackConfigPager) error {
		if filter == nil {
			return errors.New("ImplantCallbackConfigQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type implantCallbackConfigPager struct {
	order  *ImplantCallbackConfigOrder
	filter func(*ImplantCallbackConfigQuery) (*ImplantCallbackConfigQuery, error)
}

func newImplantCallbackConfigPager(opts []ImplantCallbackConfigPaginateOption) (*implantCallbackConfigPager, error) {
	pager := &implantCallbackConfigPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultImplantCallbackConfigOrder
	}
	return pager, nil
}

func (p *implantCallbackConfigPager) applyFilter(query *ImplantCallbackConfigQuery) (*ImplantCallbackConfigQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *implantCallbackConfigPager) toCursor(icc *ImplantCallbackConfig) Cursor {
	return p.order.Field.toCursor(icc)
}

func (p *implantCallbackConfigPager) applyCursors(query *ImplantCallbackConfigQuery, after, before *Cursor) *ImplantCallbackConfigQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultImplantCallbackConfigOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *implantCallbackConfigPager) applyOrder(query *ImplantCallbackConfigQuery, reverse bool) *ImplantCallbackConfigQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultImplantCallbackConfigOrder.Field {
		query = query.Order(direction.orderFunc(DefaultImplantCallbackConfigOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to ImplantCallbackConfig.
func (icc *ImplantCallbackConfigQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ImplantCallbackConfigPaginateOption,
) (*ImplantCallbackConfigConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newImplantCallbackConfigPager(opts)
	if err != nil {
		return nil, err
	}

	if icc, err = pager.applyFilter(icc); err != nil {
		return nil, err
	}

	conn := &ImplantCallbackConfigConnection{Edges: []*ImplantCallbackConfigEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := icc.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := icc.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	icc = pager.applyCursors(icc, after, before)
	icc = pager.applyOrder(icc, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		icc = icc.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		icc = icc.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := icc.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *ImplantCallbackConfig
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ImplantCallbackConfig {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ImplantCallbackConfig {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ImplantCallbackConfigEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ImplantCallbackConfigEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ImplantCallbackConfigOrderField defines the ordering field of ImplantCallbackConfig.
type ImplantCallbackConfigOrderField struct {
	field    string
	toCursor func(*ImplantCallbackConfig) Cursor
}

// ImplantCallbackConfigOrder defines the ordering of ImplantCallbackConfig.
type ImplantCallbackConfigOrder struct {
	Direction OrderDirection                   `json:"direction"`
	Field     *ImplantCallbackConfigOrderField `json:"field"`
}

// DefaultImplantCallbackConfigOrder is the default ordering of ImplantCallbackConfig.
var DefaultImplantCallbackConfigOrder = &ImplantCallbackConfigOrder{
	Direction: OrderDirectionAsc,
	Field: &ImplantCallbackConfigOrderField{
		field: implantcallbackconfig.FieldID,
		toCursor: func(icc *ImplantCallbackConfig) Cursor {
			return Cursor{ID: icc.ID}
		},
	},
}

// ToEdge converts ImplantCallbackConfig into ImplantCallbackConfigEdge.
func (icc *ImplantCallbackConfig) ToEdge(order *ImplantCallbackConfigOrder) *ImplantCallbackConfigEdge {
	if order == nil {
		order = DefaultImplantCallbackConfigOrder
	}
	return &ImplantCallbackConfigEdge{
		Node:   icc,
		Cursor: order.Field.toCursor(icc),
	}
}

// ImplantConfigEdge is the edge representation of ImplantConfig.
type ImplantConfigEdge struct {
	Node   *ImplantConfig `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// ImplantConfigConnection is the connection containing edges to ImplantConfig.
type ImplantConfigConnection struct {
	Edges      []*ImplantConfigEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

// ImplantConfigPaginateOption enables pagination customization.
type ImplantConfigPaginateOption func(*implantConfigPager) error

// WithImplantConfigOrder configures pagination ordering.
func WithImplantConfigOrder(order *ImplantConfigOrder) ImplantConfigPaginateOption {
	if order == nil {
		order = DefaultImplantConfigOrder
	}
	o := *order
	return func(pager *implantConfigPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultImplantConfigOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithImplantConfigFilter configures pagination filter.
func WithImplantConfigFilter(filter func(*ImplantConfigQuery) (*ImplantConfigQuery, error)) ImplantConfigPaginateOption {
	return func(pager *implantConfigPager) error {
		if filter == nil {
			return errors.New("ImplantConfigQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type implantConfigPager struct {
	order  *ImplantConfigOrder
	filter func(*ImplantConfigQuery) (*ImplantConfigQuery, error)
}

func newImplantConfigPager(opts []ImplantConfigPaginateOption) (*implantConfigPager, error) {
	pager := &implantConfigPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultImplantConfigOrder
	}
	return pager, nil
}

func (p *implantConfigPager) applyFilter(query *ImplantConfigQuery) (*ImplantConfigQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *implantConfigPager) toCursor(ic *ImplantConfig) Cursor {
	return p.order.Field.toCursor(ic)
}

func (p *implantConfigPager) applyCursors(query *ImplantConfigQuery, after, before *Cursor) *ImplantConfigQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultImplantConfigOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *implantConfigPager) applyOrder(query *ImplantConfigQuery, reverse bool) *ImplantConfigQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultImplantConfigOrder.Field {
		query = query.Order(direction.orderFunc(DefaultImplantConfigOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to ImplantConfig.
func (ic *ImplantConfigQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ImplantConfigPaginateOption,
) (*ImplantConfigConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newImplantConfigPager(opts)
	if err != nil {
		return nil, err
	}

	if ic, err = pager.applyFilter(ic); err != nil {
		return nil, err
	}

	conn := &ImplantConfigConnection{Edges: []*ImplantConfigEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ic.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ic.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ic = pager.applyCursors(ic, after, before)
	ic = pager.applyOrder(ic, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ic = ic.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ic = ic.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ic.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *ImplantConfig
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ImplantConfig {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ImplantConfig {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ImplantConfigEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ImplantConfigEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ImplantConfigOrderField defines the ordering field of ImplantConfig.
type ImplantConfigOrderField struct {
	field    string
	toCursor func(*ImplantConfig) Cursor
}

// ImplantConfigOrder defines the ordering of ImplantConfig.
type ImplantConfigOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *ImplantConfigOrderField `json:"field"`
}

// DefaultImplantConfigOrder is the default ordering of ImplantConfig.
var DefaultImplantConfigOrder = &ImplantConfigOrder{
	Direction: OrderDirectionAsc,
	Field: &ImplantConfigOrderField{
		field: implantconfig.FieldID,
		toCursor: func(ic *ImplantConfig) Cursor {
			return Cursor{ID: ic.ID}
		},
	},
}

// ToEdge converts ImplantConfig into ImplantConfigEdge.
func (ic *ImplantConfig) ToEdge(order *ImplantConfigOrder) *ImplantConfigEdge {
	if order == nil {
		order = DefaultImplantConfigOrder
	}
	return &ImplantConfigEdge{
		Node:   ic,
		Cursor: order.Field.toCursor(ic),
	}
}

// ImplantServiceConfigEdge is the edge representation of ImplantServiceConfig.
type ImplantServiceConfigEdge struct {
	Node   *ImplantServiceConfig `json:"node"`
	Cursor Cursor                `json:"cursor"`
}

// ImplantServiceConfigConnection is the connection containing edges to ImplantServiceConfig.
type ImplantServiceConfigConnection struct {
	Edges      []*ImplantServiceConfigEdge `json:"edges"`
	PageInfo   PageInfo                    `json:"pageInfo"`
	TotalCount int                         `json:"totalCount"`
}

// ImplantServiceConfigPaginateOption enables pagination customization.
type ImplantServiceConfigPaginateOption func(*implantServiceConfigPager) error

// WithImplantServiceConfigOrder configures pagination ordering.
func WithImplantServiceConfigOrder(order *ImplantServiceConfigOrder) ImplantServiceConfigPaginateOption {
	if order == nil {
		order = DefaultImplantServiceConfigOrder
	}
	o := *order
	return func(pager *implantServiceConfigPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultImplantServiceConfigOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithImplantServiceConfigFilter configures pagination filter.
func WithImplantServiceConfigFilter(filter func(*ImplantServiceConfigQuery) (*ImplantServiceConfigQuery, error)) ImplantServiceConfigPaginateOption {
	return func(pager *implantServiceConfigPager) error {
		if filter == nil {
			return errors.New("ImplantServiceConfigQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type implantServiceConfigPager struct {
	order  *ImplantServiceConfigOrder
	filter func(*ImplantServiceConfigQuery) (*ImplantServiceConfigQuery, error)
}

func newImplantServiceConfigPager(opts []ImplantServiceConfigPaginateOption) (*implantServiceConfigPager, error) {
	pager := &implantServiceConfigPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultImplantServiceConfigOrder
	}
	return pager, nil
}

func (p *implantServiceConfigPager) applyFilter(query *ImplantServiceConfigQuery) (*ImplantServiceConfigQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *implantServiceConfigPager) toCursor(isc *ImplantServiceConfig) Cursor {
	return p.order.Field.toCursor(isc)
}

func (p *implantServiceConfigPager) applyCursors(query *ImplantServiceConfigQuery, after, before *Cursor) *ImplantServiceConfigQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultImplantServiceConfigOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *implantServiceConfigPager) applyOrder(query *ImplantServiceConfigQuery, reverse bool) *ImplantServiceConfigQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultImplantServiceConfigOrder.Field {
		query = query.Order(direction.orderFunc(DefaultImplantServiceConfigOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to ImplantServiceConfig.
func (isc *ImplantServiceConfigQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ImplantServiceConfigPaginateOption,
) (*ImplantServiceConfigConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newImplantServiceConfigPager(opts)
	if err != nil {
		return nil, err
	}

	if isc, err = pager.applyFilter(isc); err != nil {
		return nil, err
	}

	conn := &ImplantServiceConfigConnection{Edges: []*ImplantServiceConfigEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := isc.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := isc.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	isc = pager.applyCursors(isc, after, before)
	isc = pager.applyOrder(isc, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		isc = isc.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		isc = isc.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := isc.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *ImplantServiceConfig
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ImplantServiceConfig {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ImplantServiceConfig {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ImplantServiceConfigEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ImplantServiceConfigEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ImplantServiceConfigOrderField defines the ordering field of ImplantServiceConfig.
type ImplantServiceConfigOrderField struct {
	field    string
	toCursor func(*ImplantServiceConfig) Cursor
}

// ImplantServiceConfigOrder defines the ordering of ImplantServiceConfig.
type ImplantServiceConfigOrder struct {
	Direction OrderDirection                  `json:"direction"`
	Field     *ImplantServiceConfigOrderField `json:"field"`
}

// DefaultImplantServiceConfigOrder is the default ordering of ImplantServiceConfig.
var DefaultImplantServiceConfigOrder = &ImplantServiceConfigOrder{
	Direction: OrderDirectionAsc,
	Field: &ImplantServiceConfigOrderField{
		field: implantserviceconfig.FieldID,
		toCursor: func(isc *ImplantServiceConfig) Cursor {
			return Cursor{ID: isc.ID}
		},
	},
}

// ToEdge converts ImplantServiceConfig into ImplantServiceConfigEdge.
func (isc *ImplantServiceConfig) ToEdge(order *ImplantServiceConfigOrder) *ImplantServiceConfigEdge {
	if order == nil {
		order = DefaultImplantServiceConfigOrder
	}
	return &ImplantServiceConfigEdge{
		Node:   isc,
		Cursor: order.Field.toCursor(isc),
	}
}

// TagEdge is the edge representation of Tag.
type TagEdge struct {
	Node   *Tag   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TagConnection is the connection containing edges to Tag.
type TagConnection struct {
	Edges      []*TagEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

// TagPaginateOption enables pagination customization.
type TagPaginateOption func(*tagPager) error

// WithTagOrder configures pagination ordering.
func WithTagOrder(order *TagOrder) TagPaginateOption {
	if order == nil {
		order = DefaultTagOrder
	}
	o := *order
	return func(pager *tagPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTagOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTagFilter configures pagination filter.
func WithTagFilter(filter func(*TagQuery) (*TagQuery, error)) TagPaginateOption {
	return func(pager *tagPager) error {
		if filter == nil {
			return errors.New("TagQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tagPager struct {
	order  *TagOrder
	filter func(*TagQuery) (*TagQuery, error)
}

func newTagPager(opts []TagPaginateOption) (*tagPager, error) {
	pager := &tagPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTagOrder
	}
	return pager, nil
}

func (p *tagPager) applyFilter(query *TagQuery) (*TagQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tagPager) toCursor(t *Tag) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *tagPager) applyCursors(query *TagQuery, after, before *Cursor) *TagQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTagOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *tagPager) applyOrder(query *TagQuery, reverse bool) *TagQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTagOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTagOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Tag.
func (t *TagQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TagPaginateOption,
) (*TagConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTagPager(opts)
	if err != nil {
		return nil, err
	}

	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}

	conn := &TagConnection{Edges: []*TagEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := t.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := t.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		t = t.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := t.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Tag
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Tag {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Tag {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TagEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TagEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TagOrderField defines the ordering field of Tag.
type TagOrderField struct {
	field    string
	toCursor func(*Tag) Cursor
}

// TagOrder defines the ordering of Tag.
type TagOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *TagOrderField `json:"field"`
}

// DefaultTagOrder is the default ordering of Tag.
var DefaultTagOrder = &TagOrder{
	Direction: OrderDirectionAsc,
	Field: &TagOrderField{
		field: tag.FieldID,
		toCursor: func(t *Tag) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Tag into TagEdge.
func (t *Tag) ToEdge(order *TagOrder) *TagEdge {
	if order == nil {
		order = DefaultTagOrder
	}
	return &TagEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TargetEdge is the edge representation of Target.
type TargetEdge struct {
	Node   *Target `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// TargetConnection is the connection containing edges to Target.
type TargetConnection struct {
	Edges      []*TargetEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

// TargetPaginateOption enables pagination customization.
type TargetPaginateOption func(*targetPager) error

// WithTargetOrder configures pagination ordering.
func WithTargetOrder(order *TargetOrder) TargetPaginateOption {
	if order == nil {
		order = DefaultTargetOrder
	}
	o := *order
	return func(pager *targetPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTargetOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTargetFilter configures pagination filter.
func WithTargetFilter(filter func(*TargetQuery) (*TargetQuery, error)) TargetPaginateOption {
	return func(pager *targetPager) error {
		if filter == nil {
			return errors.New("TargetQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type targetPager struct {
	order  *TargetOrder
	filter func(*TargetQuery) (*TargetQuery, error)
}

func newTargetPager(opts []TargetPaginateOption) (*targetPager, error) {
	pager := &targetPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTargetOrder
	}
	return pager, nil
}

func (p *targetPager) applyFilter(query *TargetQuery) (*TargetQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *targetPager) toCursor(t *Target) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *targetPager) applyCursors(query *TargetQuery, after, before *Cursor) *TargetQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTargetOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *targetPager) applyOrder(query *TargetQuery, reverse bool) *TargetQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTargetOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTargetOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Target.
func (t *TargetQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TargetPaginateOption,
) (*TargetConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTargetPager(opts)
	if err != nil {
		return nil, err
	}

	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}

	conn := &TargetConnection{Edges: []*TargetEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := t.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := t.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		t = t.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := t.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Target
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Target {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Target {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TargetEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TargetEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// TargetOrderFieldName orders Target by name.
	TargetOrderFieldName = &TargetOrderField{
		field: target.FieldName,
		toCursor: func(t *Target) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Name,
			}
		},
	}
	// TargetOrderFieldForwardConnectIP orders Target by forwardConnectIP.
	TargetOrderFieldForwardConnectIP = &TargetOrderField{
		field: target.FieldForwardConnectIP,
		toCursor: func(t *Target) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.ForwardConnectIP,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TargetOrderField) String() string {
	var str string
	switch f.field {
	case target.FieldName:
		str = "NAME"
	case target.FieldForwardConnectIP:
		str = "FORWARD_CONNECT_IP"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TargetOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TargetOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TargetOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *TargetOrderFieldName
	case "FORWARD_CONNECT_IP":
		*f = *TargetOrderFieldForwardConnectIP
	default:
		return fmt.Errorf("%s is not a valid TargetOrderField", str)
	}
	return nil
}

// TargetOrderField defines the ordering field of Target.
type TargetOrderField struct {
	field    string
	toCursor func(*Target) Cursor
}

// TargetOrder defines the ordering of Target.
type TargetOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *TargetOrderField `json:"field"`
}

// DefaultTargetOrder is the default ordering of Target.
var DefaultTargetOrder = &TargetOrder{
	Direction: OrderDirectionAsc,
	Field: &TargetOrderField{
		field: target.FieldID,
		toCursor: func(t *Target) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Target into TargetEdge.
func (t *Target) ToEdge(order *TargetOrder) *TargetEdge {
	if order == nil {
		order = DefaultTargetOrder
	}
	return &TargetEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}
