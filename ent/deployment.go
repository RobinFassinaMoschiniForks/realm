// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kcarretto/realm/ent/deployment"
	"github.com/kcarretto/realm/ent/deploymentconfig"
	"github.com/kcarretto/realm/ent/target"
)

// Deployment is the model entity for the Deployment schema.
type Deployment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Output holds the value of the "output" field.
	// Output from the deployment.
	Output string `json:"output,omitempty"`
	// Error holds the value of the "error" field.
	// Any errors that occurred during deployment.
	Error string `json:"error,omitempty"`
	// QueuedAt holds the value of the "queuedAt" field.
	// The timestamp for when the deployment was queued/created.
	QueuedAt time.Time `json:"queuedAt,omitempty"`
	// LastModifiedAt holds the value of the "lastModifiedAt" field.
	// The timestamp for when the deployment was last updated.
	LastModifiedAt time.Time `json:"lastModifiedAt,omitempty"`
	// StartedAt holds the value of the "startedAt" field.
	// The timestamp for when the deployment started.
	StartedAt time.Time `json:"startedAt,omitempty"`
	// FinishedAt holds the value of the "finishedAt" field.
	// The timestamp for when the deployment finished.
	FinishedAt time.Time `json:"finishedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeploymentQuery when eager-loading is set.
	Edges             DeploymentEdges `json:"edges"`
	deployment_config *int
	deployment_target *int
}

// DeploymentEdges holds the relations/edges for other nodes in the graph.
type DeploymentEdges struct {
	// Config holds the value of the config edge.
	Config *DeploymentConfig `json:"config,omitempty"`
	// Target holds the value of the target edge.
	Target *Target `json:"target,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ConfigOrErr returns the Config value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentEdges) ConfigOrErr() (*DeploymentConfig, error) {
	if e.loadedTypes[0] {
		if e.Config == nil {
			// The edge config was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: deploymentconfig.Label}
		}
		return e.Config, nil
	}
	return nil, &NotLoadedError{edge: "config"}
}

// TargetOrErr returns the Target value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeploymentEdges) TargetOrErr() (*Target, error) {
	if e.loadedTypes[1] {
		if e.Target == nil {
			// The edge target was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: target.Label}
		}
		return e.Target, nil
	}
	return nil, &NotLoadedError{edge: "target"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Deployment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case deployment.FieldID:
			values[i] = new(sql.NullInt64)
		case deployment.FieldOutput, deployment.FieldError:
			values[i] = new(sql.NullString)
		case deployment.FieldQueuedAt, deployment.FieldLastModifiedAt, deployment.FieldStartedAt, deployment.FieldFinishedAt:
			values[i] = new(sql.NullTime)
		case deployment.ForeignKeys[0]: // deployment_config
			values[i] = new(sql.NullInt64)
		case deployment.ForeignKeys[1]: // deployment_target
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Deployment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Deployment fields.
func (d *Deployment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deployment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case deployment.FieldOutput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value.Valid {
				d.Output = value.String
			}
		case deployment.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				d.Error = value.String
			}
		case deployment.FieldQueuedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field queuedAt", values[i])
			} else if value.Valid {
				d.QueuedAt = value.Time
			}
		case deployment.FieldLastModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastModifiedAt", values[i])
			} else if value.Valid {
				d.LastModifiedAt = value.Time
			}
		case deployment.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startedAt", values[i])
			} else if value.Valid {
				d.StartedAt = value.Time
			}
		case deployment.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finishedAt", values[i])
			} else if value.Valid {
				d.FinishedAt = value.Time
			}
		case deployment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deployment_config", value)
			} else if value.Valid {
				d.deployment_config = new(int)
				*d.deployment_config = int(value.Int64)
			}
		case deployment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field deployment_target", value)
			} else if value.Valid {
				d.deployment_target = new(int)
				*d.deployment_target = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryConfig queries the "config" edge of the Deployment entity.
func (d *Deployment) QueryConfig() *DeploymentConfigQuery {
	return (&DeploymentClient{config: d.config}).QueryConfig(d)
}

// QueryTarget queries the "target" edge of the Deployment entity.
func (d *Deployment) QueryTarget() *TargetQuery {
	return (&DeploymentClient{config: d.config}).QueryTarget(d)
}

// Update returns a builder for updating this Deployment.
// Note that you need to call Deployment.Unwrap() before calling this method if this Deployment
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Deployment) Update() *DeploymentUpdateOne {
	return (&DeploymentClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Deployment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Deployment) Unwrap() *Deployment {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Deployment is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Deployment) String() string {
	var builder strings.Builder
	builder.WriteString("Deployment(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", output=")
	builder.WriteString(d.Output)
	builder.WriteString(", error=")
	builder.WriteString(d.Error)
	builder.WriteString(", queuedAt=")
	builder.WriteString(d.QueuedAt.Format(time.ANSIC))
	builder.WriteString(", lastModifiedAt=")
	builder.WriteString(d.LastModifiedAt.Format(time.ANSIC))
	builder.WriteString(", startedAt=")
	builder.WriteString(d.StartedAt.Format(time.ANSIC))
	builder.WriteString(", finishedAt=")
	builder.WriteString(d.FinishedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Deployments is a parsable slice of Deployment.
type Deployments []*Deployment

func (d Deployments) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
