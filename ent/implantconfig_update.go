// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/ent/deploymentconfig"
	"github.com/kcarretto/realm/ent/implant"
	"github.com/kcarretto/realm/ent/implantcallbackconfig"
	"github.com/kcarretto/realm/ent/implantconfig"
	"github.com/kcarretto/realm/ent/implantserviceconfig"
	"github.com/kcarretto/realm/ent/predicate"
)

// ImplantConfigUpdate is the builder for updating ImplantConfig entities.
type ImplantConfigUpdate struct {
	config
	hooks    []Hook
	mutation *ImplantConfigMutation
}

// Where appends a list predicates to the ImplantConfigUpdate builder.
func (icu *ImplantConfigUpdate) Where(ps ...predicate.ImplantConfig) *ImplantConfigUpdate {
	icu.mutation.Where(ps...)
	return icu
}

// SetName sets the "name" field.
func (icu *ImplantConfigUpdate) SetName(s string) *ImplantConfigUpdate {
	icu.mutation.SetName(s)
	return icu
}

// AddDeploymentConfigIDs adds the "deploymentConfigs" edge to the DeploymentConfig entity by IDs.
func (icu *ImplantConfigUpdate) AddDeploymentConfigIDs(ids ...int) *ImplantConfigUpdate {
	icu.mutation.AddDeploymentConfigIDs(ids...)
	return icu
}

// AddDeploymentConfigs adds the "deploymentConfigs" edges to the DeploymentConfig entity.
func (icu *ImplantConfigUpdate) AddDeploymentConfigs(d ...*DeploymentConfig) *ImplantConfigUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return icu.AddDeploymentConfigIDs(ids...)
}

// AddImplantIDs adds the "implants" edge to the Implant entity by IDs.
func (icu *ImplantConfigUpdate) AddImplantIDs(ids ...int) *ImplantConfigUpdate {
	icu.mutation.AddImplantIDs(ids...)
	return icu
}

// AddImplants adds the "implants" edges to the Implant entity.
func (icu *ImplantConfigUpdate) AddImplants(i ...*Implant) *ImplantConfigUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icu.AddImplantIDs(ids...)
}

// AddServiceConfigIDs adds the "serviceConfigs" edge to the ImplantServiceConfig entity by IDs.
func (icu *ImplantConfigUpdate) AddServiceConfigIDs(ids ...int) *ImplantConfigUpdate {
	icu.mutation.AddServiceConfigIDs(ids...)
	return icu
}

// AddServiceConfigs adds the "serviceConfigs" edges to the ImplantServiceConfig entity.
func (icu *ImplantConfigUpdate) AddServiceConfigs(i ...*ImplantServiceConfig) *ImplantConfigUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icu.AddServiceConfigIDs(ids...)
}

// AddCallbackConfigIDs adds the "callbackConfigs" edge to the ImplantCallbackConfig entity by IDs.
func (icu *ImplantConfigUpdate) AddCallbackConfigIDs(ids ...int) *ImplantConfigUpdate {
	icu.mutation.AddCallbackConfigIDs(ids...)
	return icu
}

// AddCallbackConfigs adds the "callbackConfigs" edges to the ImplantCallbackConfig entity.
func (icu *ImplantConfigUpdate) AddCallbackConfigs(i ...*ImplantCallbackConfig) *ImplantConfigUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icu.AddCallbackConfigIDs(ids...)
}

// Mutation returns the ImplantConfigMutation object of the builder.
func (icu *ImplantConfigUpdate) Mutation() *ImplantConfigMutation {
	return icu.mutation
}

// ClearDeploymentConfigs clears all "deploymentConfigs" edges to the DeploymentConfig entity.
func (icu *ImplantConfigUpdate) ClearDeploymentConfigs() *ImplantConfigUpdate {
	icu.mutation.ClearDeploymentConfigs()
	return icu
}

// RemoveDeploymentConfigIDs removes the "deploymentConfigs" edge to DeploymentConfig entities by IDs.
func (icu *ImplantConfigUpdate) RemoveDeploymentConfigIDs(ids ...int) *ImplantConfigUpdate {
	icu.mutation.RemoveDeploymentConfigIDs(ids...)
	return icu
}

// RemoveDeploymentConfigs removes "deploymentConfigs" edges to DeploymentConfig entities.
func (icu *ImplantConfigUpdate) RemoveDeploymentConfigs(d ...*DeploymentConfig) *ImplantConfigUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return icu.RemoveDeploymentConfigIDs(ids...)
}

// ClearImplants clears all "implants" edges to the Implant entity.
func (icu *ImplantConfigUpdate) ClearImplants() *ImplantConfigUpdate {
	icu.mutation.ClearImplants()
	return icu
}

// RemoveImplantIDs removes the "implants" edge to Implant entities by IDs.
func (icu *ImplantConfigUpdate) RemoveImplantIDs(ids ...int) *ImplantConfigUpdate {
	icu.mutation.RemoveImplantIDs(ids...)
	return icu
}

// RemoveImplants removes "implants" edges to Implant entities.
func (icu *ImplantConfigUpdate) RemoveImplants(i ...*Implant) *ImplantConfigUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icu.RemoveImplantIDs(ids...)
}

// ClearServiceConfigs clears all "serviceConfigs" edges to the ImplantServiceConfig entity.
func (icu *ImplantConfigUpdate) ClearServiceConfigs() *ImplantConfigUpdate {
	icu.mutation.ClearServiceConfigs()
	return icu
}

// RemoveServiceConfigIDs removes the "serviceConfigs" edge to ImplantServiceConfig entities by IDs.
func (icu *ImplantConfigUpdate) RemoveServiceConfigIDs(ids ...int) *ImplantConfigUpdate {
	icu.mutation.RemoveServiceConfigIDs(ids...)
	return icu
}

// RemoveServiceConfigs removes "serviceConfigs" edges to ImplantServiceConfig entities.
func (icu *ImplantConfigUpdate) RemoveServiceConfigs(i ...*ImplantServiceConfig) *ImplantConfigUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icu.RemoveServiceConfigIDs(ids...)
}

// ClearCallbackConfigs clears all "callbackConfigs" edges to the ImplantCallbackConfig entity.
func (icu *ImplantConfigUpdate) ClearCallbackConfigs() *ImplantConfigUpdate {
	icu.mutation.ClearCallbackConfigs()
	return icu
}

// RemoveCallbackConfigIDs removes the "callbackConfigs" edge to ImplantCallbackConfig entities by IDs.
func (icu *ImplantConfigUpdate) RemoveCallbackConfigIDs(ids ...int) *ImplantConfigUpdate {
	icu.mutation.RemoveCallbackConfigIDs(ids...)
	return icu
}

// RemoveCallbackConfigs removes "callbackConfigs" edges to ImplantCallbackConfig entities.
func (icu *ImplantConfigUpdate) RemoveCallbackConfigs(i ...*ImplantCallbackConfig) *ImplantConfigUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icu.RemoveCallbackConfigIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (icu *ImplantConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(icu.hooks) == 0 {
		if err = icu.check(); err != nil {
			return 0, err
		}
		affected, err = icu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = icu.check(); err != nil {
				return 0, err
			}
			icu.mutation = mutation
			affected, err = icu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(icu.hooks) - 1; i >= 0; i-- {
			if icu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = icu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, icu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (icu *ImplantConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := icu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (icu *ImplantConfigUpdate) Exec(ctx context.Context) error {
	_, err := icu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icu *ImplantConfigUpdate) ExecX(ctx context.Context) {
	if err := icu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (icu *ImplantConfigUpdate) check() error {
	if v, ok := icu.mutation.Name(); ok {
		if err := implantconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ImplantConfig.name": %w`, err)}
		}
	}
	return nil
}

func (icu *ImplantConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   implantconfig.Table,
			Columns: implantconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implantconfig.FieldID,
			},
		},
	}
	if ps := icu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantconfig.FieldName,
		})
	}
	if icu.mutation.DeploymentConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.DeploymentConfigsTable,
			Columns: []string{implantconfig.DeploymentConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.RemovedDeploymentConfigsIDs(); len(nodes) > 0 && !icu.mutation.DeploymentConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.DeploymentConfigsTable,
			Columns: []string{implantconfig.DeploymentConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.DeploymentConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.DeploymentConfigsTable,
			Columns: []string{implantconfig.DeploymentConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icu.mutation.ImplantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.ImplantsTable,
			Columns: []string{implantconfig.ImplantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.RemovedImplantsIDs(); len(nodes) > 0 && !icu.mutation.ImplantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.ImplantsTable,
			Columns: []string{implantconfig.ImplantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.ImplantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.ImplantsTable,
			Columns: []string{implantconfig.ImplantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icu.mutation.ServiceConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.ServiceConfigsTable,
			Columns: implantconfig.ServiceConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantserviceconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.RemovedServiceConfigsIDs(); len(nodes) > 0 && !icu.mutation.ServiceConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.ServiceConfigsTable,
			Columns: implantconfig.ServiceConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantserviceconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.ServiceConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.ServiceConfigsTable,
			Columns: implantconfig.ServiceConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantserviceconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icu.mutation.CallbackConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.CallbackConfigsTable,
			Columns: implantconfig.CallbackConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantcallbackconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.RemovedCallbackConfigsIDs(); len(nodes) > 0 && !icu.mutation.CallbackConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.CallbackConfigsTable,
			Columns: implantconfig.CallbackConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantcallbackconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icu.mutation.CallbackConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.CallbackConfigsTable,
			Columns: implantconfig.CallbackConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantcallbackconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, icu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{implantconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ImplantConfigUpdateOne is the builder for updating a single ImplantConfig entity.
type ImplantConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImplantConfigMutation
}

// SetName sets the "name" field.
func (icuo *ImplantConfigUpdateOne) SetName(s string) *ImplantConfigUpdateOne {
	icuo.mutation.SetName(s)
	return icuo
}

// AddDeploymentConfigIDs adds the "deploymentConfigs" edge to the DeploymentConfig entity by IDs.
func (icuo *ImplantConfigUpdateOne) AddDeploymentConfigIDs(ids ...int) *ImplantConfigUpdateOne {
	icuo.mutation.AddDeploymentConfigIDs(ids...)
	return icuo
}

// AddDeploymentConfigs adds the "deploymentConfigs" edges to the DeploymentConfig entity.
func (icuo *ImplantConfigUpdateOne) AddDeploymentConfigs(d ...*DeploymentConfig) *ImplantConfigUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return icuo.AddDeploymentConfigIDs(ids...)
}

// AddImplantIDs adds the "implants" edge to the Implant entity by IDs.
func (icuo *ImplantConfigUpdateOne) AddImplantIDs(ids ...int) *ImplantConfigUpdateOne {
	icuo.mutation.AddImplantIDs(ids...)
	return icuo
}

// AddImplants adds the "implants" edges to the Implant entity.
func (icuo *ImplantConfigUpdateOne) AddImplants(i ...*Implant) *ImplantConfigUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icuo.AddImplantIDs(ids...)
}

// AddServiceConfigIDs adds the "serviceConfigs" edge to the ImplantServiceConfig entity by IDs.
func (icuo *ImplantConfigUpdateOne) AddServiceConfigIDs(ids ...int) *ImplantConfigUpdateOne {
	icuo.mutation.AddServiceConfigIDs(ids...)
	return icuo
}

// AddServiceConfigs adds the "serviceConfigs" edges to the ImplantServiceConfig entity.
func (icuo *ImplantConfigUpdateOne) AddServiceConfigs(i ...*ImplantServiceConfig) *ImplantConfigUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icuo.AddServiceConfigIDs(ids...)
}

// AddCallbackConfigIDs adds the "callbackConfigs" edge to the ImplantCallbackConfig entity by IDs.
func (icuo *ImplantConfigUpdateOne) AddCallbackConfigIDs(ids ...int) *ImplantConfigUpdateOne {
	icuo.mutation.AddCallbackConfigIDs(ids...)
	return icuo
}

// AddCallbackConfigs adds the "callbackConfigs" edges to the ImplantCallbackConfig entity.
func (icuo *ImplantConfigUpdateOne) AddCallbackConfigs(i ...*ImplantCallbackConfig) *ImplantConfigUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icuo.AddCallbackConfigIDs(ids...)
}

// Mutation returns the ImplantConfigMutation object of the builder.
func (icuo *ImplantConfigUpdateOne) Mutation() *ImplantConfigMutation {
	return icuo.mutation
}

// ClearDeploymentConfigs clears all "deploymentConfigs" edges to the DeploymentConfig entity.
func (icuo *ImplantConfigUpdateOne) ClearDeploymentConfigs() *ImplantConfigUpdateOne {
	icuo.mutation.ClearDeploymentConfigs()
	return icuo
}

// RemoveDeploymentConfigIDs removes the "deploymentConfigs" edge to DeploymentConfig entities by IDs.
func (icuo *ImplantConfigUpdateOne) RemoveDeploymentConfigIDs(ids ...int) *ImplantConfigUpdateOne {
	icuo.mutation.RemoveDeploymentConfigIDs(ids...)
	return icuo
}

// RemoveDeploymentConfigs removes "deploymentConfigs" edges to DeploymentConfig entities.
func (icuo *ImplantConfigUpdateOne) RemoveDeploymentConfigs(d ...*DeploymentConfig) *ImplantConfigUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return icuo.RemoveDeploymentConfigIDs(ids...)
}

// ClearImplants clears all "implants" edges to the Implant entity.
func (icuo *ImplantConfigUpdateOne) ClearImplants() *ImplantConfigUpdateOne {
	icuo.mutation.ClearImplants()
	return icuo
}

// RemoveImplantIDs removes the "implants" edge to Implant entities by IDs.
func (icuo *ImplantConfigUpdateOne) RemoveImplantIDs(ids ...int) *ImplantConfigUpdateOne {
	icuo.mutation.RemoveImplantIDs(ids...)
	return icuo
}

// RemoveImplants removes "implants" edges to Implant entities.
func (icuo *ImplantConfigUpdateOne) RemoveImplants(i ...*Implant) *ImplantConfigUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icuo.RemoveImplantIDs(ids...)
}

// ClearServiceConfigs clears all "serviceConfigs" edges to the ImplantServiceConfig entity.
func (icuo *ImplantConfigUpdateOne) ClearServiceConfigs() *ImplantConfigUpdateOne {
	icuo.mutation.ClearServiceConfigs()
	return icuo
}

// RemoveServiceConfigIDs removes the "serviceConfigs" edge to ImplantServiceConfig entities by IDs.
func (icuo *ImplantConfigUpdateOne) RemoveServiceConfigIDs(ids ...int) *ImplantConfigUpdateOne {
	icuo.mutation.RemoveServiceConfigIDs(ids...)
	return icuo
}

// RemoveServiceConfigs removes "serviceConfigs" edges to ImplantServiceConfig entities.
func (icuo *ImplantConfigUpdateOne) RemoveServiceConfigs(i ...*ImplantServiceConfig) *ImplantConfigUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icuo.RemoveServiceConfigIDs(ids...)
}

// ClearCallbackConfigs clears all "callbackConfigs" edges to the ImplantCallbackConfig entity.
func (icuo *ImplantConfigUpdateOne) ClearCallbackConfigs() *ImplantConfigUpdateOne {
	icuo.mutation.ClearCallbackConfigs()
	return icuo
}

// RemoveCallbackConfigIDs removes the "callbackConfigs" edge to ImplantCallbackConfig entities by IDs.
func (icuo *ImplantConfigUpdateOne) RemoveCallbackConfigIDs(ids ...int) *ImplantConfigUpdateOne {
	icuo.mutation.RemoveCallbackConfigIDs(ids...)
	return icuo
}

// RemoveCallbackConfigs removes "callbackConfigs" edges to ImplantCallbackConfig entities.
func (icuo *ImplantConfigUpdateOne) RemoveCallbackConfigs(i ...*ImplantCallbackConfig) *ImplantConfigUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icuo.RemoveCallbackConfigIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (icuo *ImplantConfigUpdateOne) Select(field string, fields ...string) *ImplantConfigUpdateOne {
	icuo.fields = append([]string{field}, fields...)
	return icuo
}

// Save executes the query and returns the updated ImplantConfig entity.
func (icuo *ImplantConfigUpdateOne) Save(ctx context.Context) (*ImplantConfig, error) {
	var (
		err  error
		node *ImplantConfig
	)
	if len(icuo.hooks) == 0 {
		if err = icuo.check(); err != nil {
			return nil, err
		}
		node, err = icuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = icuo.check(); err != nil {
				return nil, err
			}
			icuo.mutation = mutation
			node, err = icuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(icuo.hooks) - 1; i >= 0; i-- {
			if icuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = icuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, icuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (icuo *ImplantConfigUpdateOne) SaveX(ctx context.Context) *ImplantConfig {
	node, err := icuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (icuo *ImplantConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := icuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icuo *ImplantConfigUpdateOne) ExecX(ctx context.Context) {
	if err := icuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (icuo *ImplantConfigUpdateOne) check() error {
	if v, ok := icuo.mutation.Name(); ok {
		if err := implantconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ImplantConfig.name": %w`, err)}
		}
	}
	return nil
}

func (icuo *ImplantConfigUpdateOne) sqlSave(ctx context.Context) (_node *ImplantConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   implantconfig.Table,
			Columns: implantconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implantconfig.FieldID,
			},
		},
	}
	id, ok := icuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImplantConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := icuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, implantconfig.FieldID)
		for _, f := range fields {
			if !implantconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != implantconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := icuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := icuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantconfig.FieldName,
		})
	}
	if icuo.mutation.DeploymentConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.DeploymentConfigsTable,
			Columns: []string{implantconfig.DeploymentConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.RemovedDeploymentConfigsIDs(); len(nodes) > 0 && !icuo.mutation.DeploymentConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.DeploymentConfigsTable,
			Columns: []string{implantconfig.DeploymentConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.DeploymentConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.DeploymentConfigsTable,
			Columns: []string{implantconfig.DeploymentConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icuo.mutation.ImplantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.ImplantsTable,
			Columns: []string{implantconfig.ImplantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.RemovedImplantsIDs(); len(nodes) > 0 && !icuo.mutation.ImplantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.ImplantsTable,
			Columns: []string{implantconfig.ImplantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.ImplantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.ImplantsTable,
			Columns: []string{implantconfig.ImplantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icuo.mutation.ServiceConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.ServiceConfigsTable,
			Columns: implantconfig.ServiceConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantserviceconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.RemovedServiceConfigsIDs(); len(nodes) > 0 && !icuo.mutation.ServiceConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.ServiceConfigsTable,
			Columns: implantconfig.ServiceConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantserviceconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.ServiceConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.ServiceConfigsTable,
			Columns: implantconfig.ServiceConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantserviceconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if icuo.mutation.CallbackConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.CallbackConfigsTable,
			Columns: implantconfig.CallbackConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantcallbackconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.RemovedCallbackConfigsIDs(); len(nodes) > 0 && !icuo.mutation.CallbackConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.CallbackConfigsTable,
			Columns: implantconfig.CallbackConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantcallbackconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := icuo.mutation.CallbackConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.CallbackConfigsTable,
			Columns: implantconfig.CallbackConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantcallbackconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImplantConfig{config: icuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, icuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{implantconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
