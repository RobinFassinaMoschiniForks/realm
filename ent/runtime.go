// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/kcarretto/realm/ent/credential"
	"github.com/kcarretto/realm/ent/schema"
	"github.com/kcarretto/realm/ent/target"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	credentialFields := schema.Credential{}.Fields()
	_ = credentialFields
	// credentialDescPrincipal is the schema descriptor for principal field.
	credentialDescPrincipal := credentialFields[0].Descriptor()
	// credential.PrincipalValidator is a validator for the "principal" field. It is called by the builders before save.
	credential.PrincipalValidator = credentialDescPrincipal.Validators[0].(func(string) error)
	// credentialDescSecret is the schema descriptor for secret field.
	credentialDescSecret := credentialFields[1].Descriptor()
	// credential.SecretValidator is a validator for the "secret" field. It is called by the builders before save.
	credential.SecretValidator = func() func(string) error {
		validators := credentialDescSecret.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(secret string) error {
			for _, fn := range fns {
				if err := fn(secret); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	targetFields := schema.Target{}.Fields()
	_ = targetFields
	// targetDescName is the schema descriptor for name field.
	targetDescName := targetFields[0].Descriptor()
	// target.NameValidator is a validator for the "name" field. It is called by the builders before save.
	target.NameValidator = func() func(string) error {
		validators := targetDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// targetDescForwardConnectIP is the schema descriptor for forwardConnectIP field.
	targetDescForwardConnectIP := targetFields[1].Descriptor()
	// target.ForwardConnectIPValidator is a validator for the "forwardConnectIP" field. It is called by the builders before save.
	target.ForwardConnectIPValidator = targetDescForwardConnectIP.Validators[0].(func(string) error)
}
