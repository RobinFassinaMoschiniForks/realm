// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/ent/credential"
	"github.com/kcarretto/realm/ent/deployment"
	"github.com/kcarretto/realm/ent/implant"
	"github.com/kcarretto/realm/ent/predicate"
	"github.com/kcarretto/realm/ent/tag"
	"github.com/kcarretto/realm/ent/target"
)

// TargetUpdate is the builder for updating Target entities.
type TargetUpdate struct {
	config
	hooks    []Hook
	mutation *TargetMutation
}

// Where appends a list predicates to the TargetUpdate builder.
func (tu *TargetUpdate) Where(ps ...predicate.Target) *TargetUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TargetUpdate) SetName(s string) *TargetUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetForwardConnectIP sets the "forwardConnectIP" field.
func (tu *TargetUpdate) SetForwardConnectIP(s string) *TargetUpdate {
	tu.mutation.SetForwardConnectIP(s)
	return tu
}

// AddImplantIDs adds the "implants" edge to the Implant entity by IDs.
func (tu *TargetUpdate) AddImplantIDs(ids ...int) *TargetUpdate {
	tu.mutation.AddImplantIDs(ids...)
	return tu
}

// AddImplants adds the "implants" edges to the Implant entity.
func (tu *TargetUpdate) AddImplants(i ...*Implant) *TargetUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tu.AddImplantIDs(ids...)
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by IDs.
func (tu *TargetUpdate) AddDeploymentIDs(ids ...int) *TargetUpdate {
	tu.mutation.AddDeploymentIDs(ids...)
	return tu
}

// AddDeployments adds the "deployments" edges to the Deployment entity.
func (tu *TargetUpdate) AddDeployments(d ...*Deployment) *TargetUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tu.AddDeploymentIDs(ids...)
}

// AddCredentialIDs adds the "credentials" edge to the Credential entity by IDs.
func (tu *TargetUpdate) AddCredentialIDs(ids ...int) *TargetUpdate {
	tu.mutation.AddCredentialIDs(ids...)
	return tu
}

// AddCredentials adds the "credentials" edges to the Credential entity.
func (tu *TargetUpdate) AddCredentials(c ...*Credential) *TargetUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCredentialIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (tu *TargetUpdate) AddTagIDs(ids ...int) *TargetUpdate {
	tu.mutation.AddTagIDs(ids...)
	return tu
}

// AddTags adds the "tags" edges to the Tag entity.
func (tu *TargetUpdate) AddTags(t ...*Tag) *TargetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTagIDs(ids...)
}

// Mutation returns the TargetMutation object of the builder.
func (tu *TargetUpdate) Mutation() *TargetMutation {
	return tu.mutation
}

// ClearImplants clears all "implants" edges to the Implant entity.
func (tu *TargetUpdate) ClearImplants() *TargetUpdate {
	tu.mutation.ClearImplants()
	return tu
}

// RemoveImplantIDs removes the "implants" edge to Implant entities by IDs.
func (tu *TargetUpdate) RemoveImplantIDs(ids ...int) *TargetUpdate {
	tu.mutation.RemoveImplantIDs(ids...)
	return tu
}

// RemoveImplants removes "implants" edges to Implant entities.
func (tu *TargetUpdate) RemoveImplants(i ...*Implant) *TargetUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tu.RemoveImplantIDs(ids...)
}

// ClearDeployments clears all "deployments" edges to the Deployment entity.
func (tu *TargetUpdate) ClearDeployments() *TargetUpdate {
	tu.mutation.ClearDeployments()
	return tu
}

// RemoveDeploymentIDs removes the "deployments" edge to Deployment entities by IDs.
func (tu *TargetUpdate) RemoveDeploymentIDs(ids ...int) *TargetUpdate {
	tu.mutation.RemoveDeploymentIDs(ids...)
	return tu
}

// RemoveDeployments removes "deployments" edges to Deployment entities.
func (tu *TargetUpdate) RemoveDeployments(d ...*Deployment) *TargetUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tu.RemoveDeploymentIDs(ids...)
}

// ClearCredentials clears all "credentials" edges to the Credential entity.
func (tu *TargetUpdate) ClearCredentials() *TargetUpdate {
	tu.mutation.ClearCredentials()
	return tu
}

// RemoveCredentialIDs removes the "credentials" edge to Credential entities by IDs.
func (tu *TargetUpdate) RemoveCredentialIDs(ids ...int) *TargetUpdate {
	tu.mutation.RemoveCredentialIDs(ids...)
	return tu
}

// RemoveCredentials removes "credentials" edges to Credential entities.
func (tu *TargetUpdate) RemoveCredentials(c ...*Credential) *TargetUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCredentialIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (tu *TargetUpdate) ClearTags() *TargetUpdate {
	tu.mutation.ClearTags()
	return tu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (tu *TargetUpdate) RemoveTagIDs(ids ...int) *TargetUpdate {
	tu.mutation.RemoveTagIDs(ids...)
	return tu
}

// RemoveTags removes "tags" edges to Tag entities.
func (tu *TargetUpdate) RemoveTags(t ...*Tag) *TargetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TargetUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TargetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TargetUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TargetUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TargetUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TargetUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := target.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Target.name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.ForwardConnectIP(); ok {
		if err := target.ForwardConnectIPValidator(v); err != nil {
			return &ValidationError{Name: "forwardConnectIP", err: fmt.Errorf(`ent: validator failed for field "Target.forwardConnectIP": %w`, err)}
		}
	}
	return nil
}

func (tu *TargetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   target.Table,
			Columns: target.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: target.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: target.FieldName,
		})
	}
	if value, ok := tu.mutation.ForwardConnectIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: target.FieldForwardConnectIP,
		})
	}
	if tu.mutation.ImplantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   target.ImplantsTable,
			Columns: []string{target.ImplantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedImplantsIDs(); len(nodes) > 0 && !tu.mutation.ImplantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   target.ImplantsTable,
			Columns: []string{target.ImplantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ImplantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   target.ImplantsTable,
			Columns: []string{target.ImplantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   target.DeploymentsTable,
			Columns: []string{target.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedDeploymentsIDs(); len(nodes) > 0 && !tu.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   target.DeploymentsTable,
			Columns: []string{target.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DeploymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   target.DeploymentsTable,
			Columns: []string{target.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.CredentialsTable,
			Columns: []string{target.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedCredentialsIDs(); len(nodes) > 0 && !tu.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.CredentialsTable,
			Columns: []string{target.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.CredentialsTable,
			Columns: []string{target.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   target.TagsTable,
			Columns: target.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !tu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   target.TagsTable,
			Columns: target.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   target.TagsTable,
			Columns: target.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{target.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TargetUpdateOne is the builder for updating a single Target entity.
type TargetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TargetMutation
}

// SetName sets the "name" field.
func (tuo *TargetUpdateOne) SetName(s string) *TargetUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetForwardConnectIP sets the "forwardConnectIP" field.
func (tuo *TargetUpdateOne) SetForwardConnectIP(s string) *TargetUpdateOne {
	tuo.mutation.SetForwardConnectIP(s)
	return tuo
}

// AddImplantIDs adds the "implants" edge to the Implant entity by IDs.
func (tuo *TargetUpdateOne) AddImplantIDs(ids ...int) *TargetUpdateOne {
	tuo.mutation.AddImplantIDs(ids...)
	return tuo
}

// AddImplants adds the "implants" edges to the Implant entity.
func (tuo *TargetUpdateOne) AddImplants(i ...*Implant) *TargetUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tuo.AddImplantIDs(ids...)
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by IDs.
func (tuo *TargetUpdateOne) AddDeploymentIDs(ids ...int) *TargetUpdateOne {
	tuo.mutation.AddDeploymentIDs(ids...)
	return tuo
}

// AddDeployments adds the "deployments" edges to the Deployment entity.
func (tuo *TargetUpdateOne) AddDeployments(d ...*Deployment) *TargetUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tuo.AddDeploymentIDs(ids...)
}

// AddCredentialIDs adds the "credentials" edge to the Credential entity by IDs.
func (tuo *TargetUpdateOne) AddCredentialIDs(ids ...int) *TargetUpdateOne {
	tuo.mutation.AddCredentialIDs(ids...)
	return tuo
}

// AddCredentials adds the "credentials" edges to the Credential entity.
func (tuo *TargetUpdateOne) AddCredentials(c ...*Credential) *TargetUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCredentialIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (tuo *TargetUpdateOne) AddTagIDs(ids ...int) *TargetUpdateOne {
	tuo.mutation.AddTagIDs(ids...)
	return tuo
}

// AddTags adds the "tags" edges to the Tag entity.
func (tuo *TargetUpdateOne) AddTags(t ...*Tag) *TargetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTagIDs(ids...)
}

// Mutation returns the TargetMutation object of the builder.
func (tuo *TargetUpdateOne) Mutation() *TargetMutation {
	return tuo.mutation
}

// ClearImplants clears all "implants" edges to the Implant entity.
func (tuo *TargetUpdateOne) ClearImplants() *TargetUpdateOne {
	tuo.mutation.ClearImplants()
	return tuo
}

// RemoveImplantIDs removes the "implants" edge to Implant entities by IDs.
func (tuo *TargetUpdateOne) RemoveImplantIDs(ids ...int) *TargetUpdateOne {
	tuo.mutation.RemoveImplantIDs(ids...)
	return tuo
}

// RemoveImplants removes "implants" edges to Implant entities.
func (tuo *TargetUpdateOne) RemoveImplants(i ...*Implant) *TargetUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return tuo.RemoveImplantIDs(ids...)
}

// ClearDeployments clears all "deployments" edges to the Deployment entity.
func (tuo *TargetUpdateOne) ClearDeployments() *TargetUpdateOne {
	tuo.mutation.ClearDeployments()
	return tuo
}

// RemoveDeploymentIDs removes the "deployments" edge to Deployment entities by IDs.
func (tuo *TargetUpdateOne) RemoveDeploymentIDs(ids ...int) *TargetUpdateOne {
	tuo.mutation.RemoveDeploymentIDs(ids...)
	return tuo
}

// RemoveDeployments removes "deployments" edges to Deployment entities.
func (tuo *TargetUpdateOne) RemoveDeployments(d ...*Deployment) *TargetUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return tuo.RemoveDeploymentIDs(ids...)
}

// ClearCredentials clears all "credentials" edges to the Credential entity.
func (tuo *TargetUpdateOne) ClearCredentials() *TargetUpdateOne {
	tuo.mutation.ClearCredentials()
	return tuo
}

// RemoveCredentialIDs removes the "credentials" edge to Credential entities by IDs.
func (tuo *TargetUpdateOne) RemoveCredentialIDs(ids ...int) *TargetUpdateOne {
	tuo.mutation.RemoveCredentialIDs(ids...)
	return tuo
}

// RemoveCredentials removes "credentials" edges to Credential entities.
func (tuo *TargetUpdateOne) RemoveCredentials(c ...*Credential) *TargetUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCredentialIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (tuo *TargetUpdateOne) ClearTags() *TargetUpdateOne {
	tuo.mutation.ClearTags()
	return tuo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (tuo *TargetUpdateOne) RemoveTagIDs(ids ...int) *TargetUpdateOne {
	tuo.mutation.RemoveTagIDs(ids...)
	return tuo
}

// RemoveTags removes "tags" edges to Tag entities.
func (tuo *TargetUpdateOne) RemoveTags(t ...*Tag) *TargetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTagIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TargetUpdateOne) Select(field string, fields ...string) *TargetUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Target entity.
func (tuo *TargetUpdateOne) Save(ctx context.Context) (*Target, error) {
	var (
		err  error
		node *Target
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TargetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TargetUpdateOne) SaveX(ctx context.Context) *Target {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TargetUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TargetUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TargetUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := target.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Target.name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.ForwardConnectIP(); ok {
		if err := target.ForwardConnectIPValidator(v); err != nil {
			return &ValidationError{Name: "forwardConnectIP", err: fmt.Errorf(`ent: validator failed for field "Target.forwardConnectIP": %w`, err)}
		}
	}
	return nil
}

func (tuo *TargetUpdateOne) sqlSave(ctx context.Context) (_node *Target, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   target.Table,
			Columns: target.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: target.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Target.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, target.FieldID)
		for _, f := range fields {
			if !target.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != target.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: target.FieldName,
		})
	}
	if value, ok := tuo.mutation.ForwardConnectIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: target.FieldForwardConnectIP,
		})
	}
	if tuo.mutation.ImplantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   target.ImplantsTable,
			Columns: []string{target.ImplantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedImplantsIDs(); len(nodes) > 0 && !tuo.mutation.ImplantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   target.ImplantsTable,
			Columns: []string{target.ImplantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ImplantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   target.ImplantsTable,
			Columns: []string{target.ImplantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   target.DeploymentsTable,
			Columns: []string{target.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedDeploymentsIDs(); len(nodes) > 0 && !tuo.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   target.DeploymentsTable,
			Columns: []string{target.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DeploymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   target.DeploymentsTable,
			Columns: []string{target.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.CredentialsTable,
			Columns: []string{target.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedCredentialsIDs(); len(nodes) > 0 && !tuo.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.CredentialsTable,
			Columns: []string{target.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   target.CredentialsTable,
			Columns: []string{target.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: credential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   target.TagsTable,
			Columns: target.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !tuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   target.TagsTable,
			Columns: target.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   target.TagsTable,
			Columns: target.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Target{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{target.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
