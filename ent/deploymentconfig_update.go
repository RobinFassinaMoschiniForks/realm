// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/ent/deployment"
	"github.com/kcarretto/realm/ent/deploymentconfig"
	"github.com/kcarretto/realm/ent/file"
	"github.com/kcarretto/realm/ent/implantconfig"
	"github.com/kcarretto/realm/ent/predicate"
)

// DeploymentConfigUpdate is the builder for updating DeploymentConfig entities.
type DeploymentConfigUpdate struct {
	config
	hooks    []Hook
	mutation *DeploymentConfigMutation
}

// Where appends a list predicates to the DeploymentConfigUpdate builder.
func (dcu *DeploymentConfigUpdate) Where(ps ...predicate.DeploymentConfig) *DeploymentConfigUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetName sets the "name" field.
func (dcu *DeploymentConfigUpdate) SetName(s string) *DeploymentConfigUpdate {
	dcu.mutation.SetName(s)
	return dcu
}

// SetCmd sets the "cmd" field.
func (dcu *DeploymentConfigUpdate) SetCmd(s string) *DeploymentConfigUpdate {
	dcu.mutation.SetCmd(s)
	return dcu
}

// SetNillableCmd sets the "cmd" field if the given value is not nil.
func (dcu *DeploymentConfigUpdate) SetNillableCmd(s *string) *DeploymentConfigUpdate {
	if s != nil {
		dcu.SetCmd(*s)
	}
	return dcu
}

// SetStartCmd sets the "startCmd" field.
func (dcu *DeploymentConfigUpdate) SetStartCmd(b bool) *DeploymentConfigUpdate {
	dcu.mutation.SetStartCmd(b)
	return dcu
}

// SetNillableStartCmd sets the "startCmd" field if the given value is not nil.
func (dcu *DeploymentConfigUpdate) SetNillableStartCmd(b *bool) *DeploymentConfigUpdate {
	if b != nil {
		dcu.SetStartCmd(*b)
	}
	return dcu
}

// SetFileDst sets the "fileDst" field.
func (dcu *DeploymentConfigUpdate) SetFileDst(s string) *DeploymentConfigUpdate {
	dcu.mutation.SetFileDst(s)
	return dcu
}

// SetNillableFileDst sets the "fileDst" field if the given value is not nil.
func (dcu *DeploymentConfigUpdate) SetNillableFileDst(s *string) *DeploymentConfigUpdate {
	if s != nil {
		dcu.SetFileDst(*s)
	}
	return dcu
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by IDs.
func (dcu *DeploymentConfigUpdate) AddDeploymentIDs(ids ...int) *DeploymentConfigUpdate {
	dcu.mutation.AddDeploymentIDs(ids...)
	return dcu
}

// AddDeployments adds the "deployments" edges to the Deployment entity.
func (dcu *DeploymentConfigUpdate) AddDeployments(d ...*Deployment) *DeploymentConfigUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcu.AddDeploymentIDs(ids...)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (dcu *DeploymentConfigUpdate) SetFileID(id int) *DeploymentConfigUpdate {
	dcu.mutation.SetFileID(id)
	return dcu
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (dcu *DeploymentConfigUpdate) SetNillableFileID(id *int) *DeploymentConfigUpdate {
	if id != nil {
		dcu = dcu.SetFileID(*id)
	}
	return dcu
}

// SetFile sets the "file" edge to the File entity.
func (dcu *DeploymentConfigUpdate) SetFile(f *File) *DeploymentConfigUpdate {
	return dcu.SetFileID(f.ID)
}

// SetImplantConfigID sets the "implantConfig" edge to the ImplantConfig entity by ID.
func (dcu *DeploymentConfigUpdate) SetImplantConfigID(id int) *DeploymentConfigUpdate {
	dcu.mutation.SetImplantConfigID(id)
	return dcu
}

// SetNillableImplantConfigID sets the "implantConfig" edge to the ImplantConfig entity by ID if the given value is not nil.
func (dcu *DeploymentConfigUpdate) SetNillableImplantConfigID(id *int) *DeploymentConfigUpdate {
	if id != nil {
		dcu = dcu.SetImplantConfigID(*id)
	}
	return dcu
}

// SetImplantConfig sets the "implantConfig" edge to the ImplantConfig entity.
func (dcu *DeploymentConfigUpdate) SetImplantConfig(i *ImplantConfig) *DeploymentConfigUpdate {
	return dcu.SetImplantConfigID(i.ID)
}

// Mutation returns the DeploymentConfigMutation object of the builder.
func (dcu *DeploymentConfigUpdate) Mutation() *DeploymentConfigMutation {
	return dcu.mutation
}

// ClearDeployments clears all "deployments" edges to the Deployment entity.
func (dcu *DeploymentConfigUpdate) ClearDeployments() *DeploymentConfigUpdate {
	dcu.mutation.ClearDeployments()
	return dcu
}

// RemoveDeploymentIDs removes the "deployments" edge to Deployment entities by IDs.
func (dcu *DeploymentConfigUpdate) RemoveDeploymentIDs(ids ...int) *DeploymentConfigUpdate {
	dcu.mutation.RemoveDeploymentIDs(ids...)
	return dcu
}

// RemoveDeployments removes "deployments" edges to Deployment entities.
func (dcu *DeploymentConfigUpdate) RemoveDeployments(d ...*Deployment) *DeploymentConfigUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcu.RemoveDeploymentIDs(ids...)
}

// ClearFile clears the "file" edge to the File entity.
func (dcu *DeploymentConfigUpdate) ClearFile() *DeploymentConfigUpdate {
	dcu.mutation.ClearFile()
	return dcu
}

// ClearImplantConfig clears the "implantConfig" edge to the ImplantConfig entity.
func (dcu *DeploymentConfigUpdate) ClearImplantConfig() *DeploymentConfigUpdate {
	dcu.mutation.ClearImplantConfig()
	return dcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DeploymentConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dcu.hooks) == 0 {
		if err = dcu.check(); err != nil {
			return 0, err
		}
		affected, err = dcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeploymentConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcu.check(); err != nil {
				return 0, err
			}
			dcu.mutation = mutation
			affected, err = dcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dcu.hooks) - 1; i >= 0; i-- {
			if dcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DeploymentConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DeploymentConfigUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DeploymentConfigUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcu *DeploymentConfigUpdate) check() error {
	if v, ok := dcu.mutation.Name(); ok {
		if err := deploymentconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DeploymentConfig.name": %w`, err)}
		}
	}
	return nil
}

func (dcu *DeploymentConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deploymentconfig.Table,
			Columns: deploymentconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deploymentconfig.FieldID,
			},
		},
	}
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deploymentconfig.FieldName,
		})
	}
	if value, ok := dcu.mutation.Cmd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deploymentconfig.FieldCmd,
		})
	}
	if value, ok := dcu.mutation.StartCmd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: deploymentconfig.FieldStartCmd,
		})
	}
	if value, ok := dcu.mutation.FileDst(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deploymentconfig.FieldFileDst,
		})
	}
	if dcu.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deploymentconfig.DeploymentsTable,
			Columns: []string{deploymentconfig.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedDeploymentsIDs(); len(nodes) > 0 && !dcu.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deploymentconfig.DeploymentsTable,
			Columns: []string{deploymentconfig.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.DeploymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deploymentconfig.DeploymentsTable,
			Columns: []string{deploymentconfig.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentconfig.FileTable,
			Columns: []string{deploymentconfig.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentconfig.FileTable,
			Columns: []string{deploymentconfig.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.ImplantConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentconfig.ImplantConfigTable,
			Columns: []string{deploymentconfig.ImplantConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.ImplantConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentconfig.ImplantConfigTable,
			Columns: []string{deploymentconfig.ImplantConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deploymentconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DeploymentConfigUpdateOne is the builder for updating a single DeploymentConfig entity.
type DeploymentConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeploymentConfigMutation
}

// SetName sets the "name" field.
func (dcuo *DeploymentConfigUpdateOne) SetName(s string) *DeploymentConfigUpdateOne {
	dcuo.mutation.SetName(s)
	return dcuo
}

// SetCmd sets the "cmd" field.
func (dcuo *DeploymentConfigUpdateOne) SetCmd(s string) *DeploymentConfigUpdateOne {
	dcuo.mutation.SetCmd(s)
	return dcuo
}

// SetNillableCmd sets the "cmd" field if the given value is not nil.
func (dcuo *DeploymentConfigUpdateOne) SetNillableCmd(s *string) *DeploymentConfigUpdateOne {
	if s != nil {
		dcuo.SetCmd(*s)
	}
	return dcuo
}

// SetStartCmd sets the "startCmd" field.
func (dcuo *DeploymentConfigUpdateOne) SetStartCmd(b bool) *DeploymentConfigUpdateOne {
	dcuo.mutation.SetStartCmd(b)
	return dcuo
}

// SetNillableStartCmd sets the "startCmd" field if the given value is not nil.
func (dcuo *DeploymentConfigUpdateOne) SetNillableStartCmd(b *bool) *DeploymentConfigUpdateOne {
	if b != nil {
		dcuo.SetStartCmd(*b)
	}
	return dcuo
}

// SetFileDst sets the "fileDst" field.
func (dcuo *DeploymentConfigUpdateOne) SetFileDst(s string) *DeploymentConfigUpdateOne {
	dcuo.mutation.SetFileDst(s)
	return dcuo
}

// SetNillableFileDst sets the "fileDst" field if the given value is not nil.
func (dcuo *DeploymentConfigUpdateOne) SetNillableFileDst(s *string) *DeploymentConfigUpdateOne {
	if s != nil {
		dcuo.SetFileDst(*s)
	}
	return dcuo
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by IDs.
func (dcuo *DeploymentConfigUpdateOne) AddDeploymentIDs(ids ...int) *DeploymentConfigUpdateOne {
	dcuo.mutation.AddDeploymentIDs(ids...)
	return dcuo
}

// AddDeployments adds the "deployments" edges to the Deployment entity.
func (dcuo *DeploymentConfigUpdateOne) AddDeployments(d ...*Deployment) *DeploymentConfigUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcuo.AddDeploymentIDs(ids...)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (dcuo *DeploymentConfigUpdateOne) SetFileID(id int) *DeploymentConfigUpdateOne {
	dcuo.mutation.SetFileID(id)
	return dcuo
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (dcuo *DeploymentConfigUpdateOne) SetNillableFileID(id *int) *DeploymentConfigUpdateOne {
	if id != nil {
		dcuo = dcuo.SetFileID(*id)
	}
	return dcuo
}

// SetFile sets the "file" edge to the File entity.
func (dcuo *DeploymentConfigUpdateOne) SetFile(f *File) *DeploymentConfigUpdateOne {
	return dcuo.SetFileID(f.ID)
}

// SetImplantConfigID sets the "implantConfig" edge to the ImplantConfig entity by ID.
func (dcuo *DeploymentConfigUpdateOne) SetImplantConfigID(id int) *DeploymentConfigUpdateOne {
	dcuo.mutation.SetImplantConfigID(id)
	return dcuo
}

// SetNillableImplantConfigID sets the "implantConfig" edge to the ImplantConfig entity by ID if the given value is not nil.
func (dcuo *DeploymentConfigUpdateOne) SetNillableImplantConfigID(id *int) *DeploymentConfigUpdateOne {
	if id != nil {
		dcuo = dcuo.SetImplantConfigID(*id)
	}
	return dcuo
}

// SetImplantConfig sets the "implantConfig" edge to the ImplantConfig entity.
func (dcuo *DeploymentConfigUpdateOne) SetImplantConfig(i *ImplantConfig) *DeploymentConfigUpdateOne {
	return dcuo.SetImplantConfigID(i.ID)
}

// Mutation returns the DeploymentConfigMutation object of the builder.
func (dcuo *DeploymentConfigUpdateOne) Mutation() *DeploymentConfigMutation {
	return dcuo.mutation
}

// ClearDeployments clears all "deployments" edges to the Deployment entity.
func (dcuo *DeploymentConfigUpdateOne) ClearDeployments() *DeploymentConfigUpdateOne {
	dcuo.mutation.ClearDeployments()
	return dcuo
}

// RemoveDeploymentIDs removes the "deployments" edge to Deployment entities by IDs.
func (dcuo *DeploymentConfigUpdateOne) RemoveDeploymentIDs(ids ...int) *DeploymentConfigUpdateOne {
	dcuo.mutation.RemoveDeploymentIDs(ids...)
	return dcuo
}

// RemoveDeployments removes "deployments" edges to Deployment entities.
func (dcuo *DeploymentConfigUpdateOne) RemoveDeployments(d ...*Deployment) *DeploymentConfigUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dcuo.RemoveDeploymentIDs(ids...)
}

// ClearFile clears the "file" edge to the File entity.
func (dcuo *DeploymentConfigUpdateOne) ClearFile() *DeploymentConfigUpdateOne {
	dcuo.mutation.ClearFile()
	return dcuo
}

// ClearImplantConfig clears the "implantConfig" edge to the ImplantConfig entity.
func (dcuo *DeploymentConfigUpdateOne) ClearImplantConfig() *DeploymentConfigUpdateOne {
	dcuo.mutation.ClearImplantConfig()
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DeploymentConfigUpdateOne) Select(field string, fields ...string) *DeploymentConfigUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DeploymentConfig entity.
func (dcuo *DeploymentConfigUpdateOne) Save(ctx context.Context) (*DeploymentConfig, error) {
	var (
		err  error
		node *DeploymentConfig
	)
	if len(dcuo.hooks) == 0 {
		if err = dcuo.check(); err != nil {
			return nil, err
		}
		node, err = dcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeploymentConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcuo.check(); err != nil {
				return nil, err
			}
			dcuo.mutation = mutation
			node, err = dcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dcuo.hooks) - 1; i >= 0; i-- {
			if dcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DeploymentConfigUpdateOne) SaveX(ctx context.Context) *DeploymentConfig {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DeploymentConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DeploymentConfigUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcuo *DeploymentConfigUpdateOne) check() error {
	if v, ok := dcuo.mutation.Name(); ok {
		if err := deploymentconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DeploymentConfig.name": %w`, err)}
		}
	}
	return nil
}

func (dcuo *DeploymentConfigUpdateOne) sqlSave(ctx context.Context) (_node *DeploymentConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deploymentconfig.Table,
			Columns: deploymentconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deploymentconfig.FieldID,
			},
		},
	}
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeploymentConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deploymentconfig.FieldID)
		for _, f := range fields {
			if !deploymentconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deploymentconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deploymentconfig.FieldName,
		})
	}
	if value, ok := dcuo.mutation.Cmd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deploymentconfig.FieldCmd,
		})
	}
	if value, ok := dcuo.mutation.StartCmd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: deploymentconfig.FieldStartCmd,
		})
	}
	if value, ok := dcuo.mutation.FileDst(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deploymentconfig.FieldFileDst,
		})
	}
	if dcuo.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deploymentconfig.DeploymentsTable,
			Columns: []string{deploymentconfig.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedDeploymentsIDs(); len(nodes) > 0 && !dcuo.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deploymentconfig.DeploymentsTable,
			Columns: []string{deploymentconfig.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.DeploymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deploymentconfig.DeploymentsTable,
			Columns: []string{deploymentconfig.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentconfig.FileTable,
			Columns: []string{deploymentconfig.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentconfig.FileTable,
			Columns: []string{deploymentconfig.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.ImplantConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentconfig.ImplantConfigTable,
			Columns: []string{deploymentconfig.ImplantConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.ImplantConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deploymentconfig.ImplantConfigTable,
			Columns: []string{deploymentconfig.ImplantConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeploymentConfig{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deploymentconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
