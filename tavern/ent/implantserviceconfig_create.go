// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/tavern/ent/implantconfig"
	"github.com/kcarretto/realm/tavern/ent/implantserviceconfig"
)

// ImplantServiceConfigCreate is the builder for creating a ImplantServiceConfig entity.
type ImplantServiceConfigCreate struct {
	config
	mutation *ImplantServiceConfigMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (iscc *ImplantServiceConfigCreate) SetName(s string) *ImplantServiceConfigCreate {
	iscc.mutation.SetName(s)
	return iscc
}

// SetDescription sets the "description" field.
func (iscc *ImplantServiceConfigCreate) SetDescription(s string) *ImplantServiceConfigCreate {
	iscc.mutation.SetDescription(s)
	return iscc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iscc *ImplantServiceConfigCreate) SetNillableDescription(s *string) *ImplantServiceConfigCreate {
	if s != nil {
		iscc.SetDescription(*s)
	}
	return iscc
}

// SetExecutablePath sets the "executablePath" field.
func (iscc *ImplantServiceConfigCreate) SetExecutablePath(s string) *ImplantServiceConfigCreate {
	iscc.mutation.SetExecutablePath(s)
	return iscc
}

// AddImplantConfigIDs adds the "implantConfigs" edge to the ImplantConfig entity by IDs.
func (iscc *ImplantServiceConfigCreate) AddImplantConfigIDs(ids ...int) *ImplantServiceConfigCreate {
	iscc.mutation.AddImplantConfigIDs(ids...)
	return iscc
}

// AddImplantConfigs adds the "implantConfigs" edges to the ImplantConfig entity.
func (iscc *ImplantServiceConfigCreate) AddImplantConfigs(i ...*ImplantConfig) *ImplantServiceConfigCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iscc.AddImplantConfigIDs(ids...)
}

// Mutation returns the ImplantServiceConfigMutation object of the builder.
func (iscc *ImplantServiceConfigCreate) Mutation() *ImplantServiceConfigMutation {
	return iscc.mutation
}

// Save creates the ImplantServiceConfig in the database.
func (iscc *ImplantServiceConfigCreate) Save(ctx context.Context) (*ImplantServiceConfig, error) {
	var (
		err  error
		node *ImplantServiceConfig
	)
	iscc.defaults()
	if len(iscc.hooks) == 0 {
		if err = iscc.check(); err != nil {
			return nil, err
		}
		node, err = iscc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantServiceConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iscc.check(); err != nil {
				return nil, err
			}
			iscc.mutation = mutation
			if node, err = iscc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(iscc.hooks) - 1; i >= 0; i-- {
			if iscc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iscc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iscc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (iscc *ImplantServiceConfigCreate) SaveX(ctx context.Context) *ImplantServiceConfig {
	v, err := iscc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iscc *ImplantServiceConfigCreate) Exec(ctx context.Context) error {
	_, err := iscc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscc *ImplantServiceConfigCreate) ExecX(ctx context.Context) {
	if err := iscc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iscc *ImplantServiceConfigCreate) defaults() {
	if _, ok := iscc.mutation.Description(); !ok {
		v := implantserviceconfig.DefaultDescription
		iscc.mutation.SetDescription(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iscc *ImplantServiceConfigCreate) check() error {
	if _, ok := iscc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ImplantServiceConfig.name"`)}
	}
	if v, ok := iscc.mutation.Name(); ok {
		if err := implantserviceconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ImplantServiceConfig.name": %w`, err)}
		}
	}
	if _, ok := iscc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ImplantServiceConfig.description"`)}
	}
	if _, ok := iscc.mutation.ExecutablePath(); !ok {
		return &ValidationError{Name: "executablePath", err: errors.New(`ent: missing required field "ImplantServiceConfig.executablePath"`)}
	}
	if v, ok := iscc.mutation.ExecutablePath(); ok {
		if err := implantserviceconfig.ExecutablePathValidator(v); err != nil {
			return &ValidationError{Name: "executablePath", err: fmt.Errorf(`ent: validator failed for field "ImplantServiceConfig.executablePath": %w`, err)}
		}
	}
	return nil
}

func (iscc *ImplantServiceConfigCreate) sqlSave(ctx context.Context) (*ImplantServiceConfig, error) {
	_node, _spec := iscc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iscc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (iscc *ImplantServiceConfigCreate) createSpec() (*ImplantServiceConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &ImplantServiceConfig{config: iscc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: implantserviceconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implantserviceconfig.FieldID,
			},
		}
	)
	if value, ok := iscc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantserviceconfig.FieldName,
		})
		_node.Name = value
	}
	if value, ok := iscc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantserviceconfig.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := iscc.mutation.ExecutablePath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantserviceconfig.FieldExecutablePath,
		})
		_node.ExecutablePath = value
	}
	if nodes := iscc.mutation.ImplantConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantserviceconfig.ImplantConfigsTable,
			Columns: implantserviceconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImplantServiceConfigCreateBulk is the builder for creating many ImplantServiceConfig entities in bulk.
type ImplantServiceConfigCreateBulk struct {
	config
	builders []*ImplantServiceConfigCreate
}

// Save creates the ImplantServiceConfig entities in the database.
func (isccb *ImplantServiceConfigCreateBulk) Save(ctx context.Context) ([]*ImplantServiceConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(isccb.builders))
	nodes := make([]*ImplantServiceConfig, len(isccb.builders))
	mutators := make([]Mutator, len(isccb.builders))
	for i := range isccb.builders {
		func(i int, root context.Context) {
			builder := isccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImplantServiceConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, isccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, isccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, isccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (isccb *ImplantServiceConfigCreateBulk) SaveX(ctx context.Context) []*ImplantServiceConfig {
	v, err := isccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (isccb *ImplantServiceConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := isccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isccb *ImplantServiceConfigCreateBulk) ExecX(ctx context.Context) {
	if err := isccb.Exec(ctx); err != nil {
		panic(err)
	}
}
