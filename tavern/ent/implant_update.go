// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/tavern/ent/implant"
	"github.com/kcarretto/realm/tavern/ent/implantconfig"
	"github.com/kcarretto/realm/tavern/ent/predicate"
	"github.com/kcarretto/realm/tavern/ent/target"
)

// ImplantUpdate is the builder for updating Implant entities.
type ImplantUpdate struct {
	config
	hooks    []Hook
	mutation *ImplantMutation
}

// Where appends a list predicates to the ImplantUpdate builder.
func (iu *ImplantUpdate) Where(ps ...predicate.Implant) *ImplantUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetSessionID sets the "sessionID" field.
func (iu *ImplantUpdate) SetSessionID(s string) *ImplantUpdate {
	iu.mutation.SetSessionID(s)
	return iu
}

// SetProcessName sets the "processName" field.
func (iu *ImplantUpdate) SetProcessName(s string) *ImplantUpdate {
	iu.mutation.SetProcessName(s)
	return iu
}

// SetNillableProcessName sets the "processName" field if the given value is not nil.
func (iu *ImplantUpdate) SetNillableProcessName(s *string) *ImplantUpdate {
	if s != nil {
		iu.SetProcessName(*s)
	}
	return iu
}

// ClearProcessName clears the value of the "processName" field.
func (iu *ImplantUpdate) ClearProcessName() *ImplantUpdate {
	iu.mutation.ClearProcessName()
	return iu
}

// SetTargetID sets the "target" edge to the Target entity by ID.
func (iu *ImplantUpdate) SetTargetID(id int) *ImplantUpdate {
	iu.mutation.SetTargetID(id)
	return iu
}

// SetTarget sets the "target" edge to the Target entity.
func (iu *ImplantUpdate) SetTarget(t *Target) *ImplantUpdate {
	return iu.SetTargetID(t.ID)
}

// SetConfigID sets the "config" edge to the ImplantConfig entity by ID.
func (iu *ImplantUpdate) SetConfigID(id int) *ImplantUpdate {
	iu.mutation.SetConfigID(id)
	return iu
}

// SetConfig sets the "config" edge to the ImplantConfig entity.
func (iu *ImplantUpdate) SetConfig(i *ImplantConfig) *ImplantUpdate {
	return iu.SetConfigID(i.ID)
}

// Mutation returns the ImplantMutation object of the builder.
func (iu *ImplantUpdate) Mutation() *ImplantMutation {
	return iu.mutation
}

// ClearTarget clears the "target" edge to the Target entity.
func (iu *ImplantUpdate) ClearTarget() *ImplantUpdate {
	iu.mutation.ClearTarget()
	return iu
}

// ClearConfig clears the "config" edge to the ImplantConfig entity.
func (iu *ImplantUpdate) ClearConfig() *ImplantUpdate {
	iu.mutation.ClearConfig()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ImplantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		if err = iu.check(); err != nil {
			return 0, err
		}
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iu.check(); err != nil {
				return 0, err
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImplantUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImplantUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImplantUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ImplantUpdate) check() error {
	if v, ok := iu.mutation.SessionID(); ok {
		if err := implant.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "sessionID", err: fmt.Errorf(`ent: validator failed for field "Implant.sessionID": %w`, err)}
		}
	}
	if _, ok := iu.mutation.TargetID(); iu.mutation.TargetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Implant.target"`)
	}
	if _, ok := iu.mutation.ConfigID(); iu.mutation.ConfigCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Implant.config"`)
	}
	return nil
}

func (iu *ImplantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   implant.Table,
			Columns: implant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implant.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.SessionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldSessionID,
		})
	}
	if value, ok := iu.mutation.ProcessName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldProcessName,
		})
	}
	if iu.mutation.ProcessNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: implant.FieldProcessName,
		})
	}
	if iu.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   implant.TargetTable,
			Columns: []string{implant.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   implant.TargetTable,
			Columns: []string{implant.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   implant.ConfigTable,
			Columns: []string{implant.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   implant.ConfigTable,
			Columns: []string{implant.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{implant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ImplantUpdateOne is the builder for updating a single Implant entity.
type ImplantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImplantMutation
}

// SetSessionID sets the "sessionID" field.
func (iuo *ImplantUpdateOne) SetSessionID(s string) *ImplantUpdateOne {
	iuo.mutation.SetSessionID(s)
	return iuo
}

// SetProcessName sets the "processName" field.
func (iuo *ImplantUpdateOne) SetProcessName(s string) *ImplantUpdateOne {
	iuo.mutation.SetProcessName(s)
	return iuo
}

// SetNillableProcessName sets the "processName" field if the given value is not nil.
func (iuo *ImplantUpdateOne) SetNillableProcessName(s *string) *ImplantUpdateOne {
	if s != nil {
		iuo.SetProcessName(*s)
	}
	return iuo
}

// ClearProcessName clears the value of the "processName" field.
func (iuo *ImplantUpdateOne) ClearProcessName() *ImplantUpdateOne {
	iuo.mutation.ClearProcessName()
	return iuo
}

// SetTargetID sets the "target" edge to the Target entity by ID.
func (iuo *ImplantUpdateOne) SetTargetID(id int) *ImplantUpdateOne {
	iuo.mutation.SetTargetID(id)
	return iuo
}

// SetTarget sets the "target" edge to the Target entity.
func (iuo *ImplantUpdateOne) SetTarget(t *Target) *ImplantUpdateOne {
	return iuo.SetTargetID(t.ID)
}

// SetConfigID sets the "config" edge to the ImplantConfig entity by ID.
func (iuo *ImplantUpdateOne) SetConfigID(id int) *ImplantUpdateOne {
	iuo.mutation.SetConfigID(id)
	return iuo
}

// SetConfig sets the "config" edge to the ImplantConfig entity.
func (iuo *ImplantUpdateOne) SetConfig(i *ImplantConfig) *ImplantUpdateOne {
	return iuo.SetConfigID(i.ID)
}

// Mutation returns the ImplantMutation object of the builder.
func (iuo *ImplantUpdateOne) Mutation() *ImplantMutation {
	return iuo.mutation
}

// ClearTarget clears the "target" edge to the Target entity.
func (iuo *ImplantUpdateOne) ClearTarget() *ImplantUpdateOne {
	iuo.mutation.ClearTarget()
	return iuo
}

// ClearConfig clears the "config" edge to the ImplantConfig entity.
func (iuo *ImplantUpdateOne) ClearConfig() *ImplantUpdateOne {
	iuo.mutation.ClearConfig()
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ImplantUpdateOne) Select(field string, fields ...string) *ImplantUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Implant entity.
func (iuo *ImplantUpdateOne) Save(ctx context.Context) (*Implant, error) {
	var (
		err  error
		node *Implant
	)
	if len(iuo.hooks) == 0 {
		if err = iuo.check(); err != nil {
			return nil, err
		}
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iuo.check(); err != nil {
				return nil, err
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImplantUpdateOne) SaveX(ctx context.Context) *Implant {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ImplantUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImplantUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ImplantUpdateOne) check() error {
	if v, ok := iuo.mutation.SessionID(); ok {
		if err := implant.SessionIDValidator(v); err != nil {
			return &ValidationError{Name: "sessionID", err: fmt.Errorf(`ent: validator failed for field "Implant.sessionID": %w`, err)}
		}
	}
	if _, ok := iuo.mutation.TargetID(); iuo.mutation.TargetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Implant.target"`)
	}
	if _, ok := iuo.mutation.ConfigID(); iuo.mutation.ConfigCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Implant.config"`)
	}
	return nil
}

func (iuo *ImplantUpdateOne) sqlSave(ctx context.Context) (_node *Implant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   implant.Table,
			Columns: implant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implant.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Implant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, implant.FieldID)
		for _, f := range fields {
			if !implant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != implant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.SessionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldSessionID,
		})
	}
	if value, ok := iuo.mutation.ProcessName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldProcessName,
		})
	}
	if iuo.mutation.ProcessNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: implant.FieldProcessName,
		})
	}
	if iuo.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   implant.TargetTable,
			Columns: []string{implant.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   implant.TargetTable,
			Columns: []string{implant.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   implant.ConfigTable,
			Columns: []string{implant.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   implant.ConfigTable,
			Columns: []string{implant.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Implant{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{implant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
