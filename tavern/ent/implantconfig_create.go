// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/tavern/ent/deploymentconfig"
	"github.com/kcarretto/realm/tavern/ent/implant"
	"github.com/kcarretto/realm/tavern/ent/implantcallbackconfig"
	"github.com/kcarretto/realm/tavern/ent/implantconfig"
	"github.com/kcarretto/realm/tavern/ent/implantserviceconfig"
)

// ImplantConfigCreate is the builder for creating a ImplantConfig entity.
type ImplantConfigCreate struct {
	config
	mutation *ImplantConfigMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (icc *ImplantConfigCreate) SetName(s string) *ImplantConfigCreate {
	icc.mutation.SetName(s)
	return icc
}

// SetAuthToken sets the "authToken" field.
func (icc *ImplantConfigCreate) SetAuthToken(s string) *ImplantConfigCreate {
	icc.mutation.SetAuthToken(s)
	return icc
}

// SetNillableAuthToken sets the "authToken" field if the given value is not nil.
func (icc *ImplantConfigCreate) SetNillableAuthToken(s *string) *ImplantConfigCreate {
	if s != nil {
		icc.SetAuthToken(*s)
	}
	return icc
}

// AddDeploymentConfigIDs adds the "deploymentConfigs" edge to the DeploymentConfig entity by IDs.
func (icc *ImplantConfigCreate) AddDeploymentConfigIDs(ids ...int) *ImplantConfigCreate {
	icc.mutation.AddDeploymentConfigIDs(ids...)
	return icc
}

// AddDeploymentConfigs adds the "deploymentConfigs" edges to the DeploymentConfig entity.
func (icc *ImplantConfigCreate) AddDeploymentConfigs(d ...*DeploymentConfig) *ImplantConfigCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return icc.AddDeploymentConfigIDs(ids...)
}

// AddImplantIDs adds the "implants" edge to the Implant entity by IDs.
func (icc *ImplantConfigCreate) AddImplantIDs(ids ...int) *ImplantConfigCreate {
	icc.mutation.AddImplantIDs(ids...)
	return icc
}

// AddImplants adds the "implants" edges to the Implant entity.
func (icc *ImplantConfigCreate) AddImplants(i ...*Implant) *ImplantConfigCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icc.AddImplantIDs(ids...)
}

// AddServiceConfigIDs adds the "serviceConfigs" edge to the ImplantServiceConfig entity by IDs.
func (icc *ImplantConfigCreate) AddServiceConfigIDs(ids ...int) *ImplantConfigCreate {
	icc.mutation.AddServiceConfigIDs(ids...)
	return icc
}

// AddServiceConfigs adds the "serviceConfigs" edges to the ImplantServiceConfig entity.
func (icc *ImplantConfigCreate) AddServiceConfigs(i ...*ImplantServiceConfig) *ImplantConfigCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icc.AddServiceConfigIDs(ids...)
}

// AddCallbackConfigIDs adds the "callbackConfigs" edge to the ImplantCallbackConfig entity by IDs.
func (icc *ImplantConfigCreate) AddCallbackConfigIDs(ids ...int) *ImplantConfigCreate {
	icc.mutation.AddCallbackConfigIDs(ids...)
	return icc
}

// AddCallbackConfigs adds the "callbackConfigs" edges to the ImplantCallbackConfig entity.
func (icc *ImplantConfigCreate) AddCallbackConfigs(i ...*ImplantCallbackConfig) *ImplantConfigCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return icc.AddCallbackConfigIDs(ids...)
}

// Mutation returns the ImplantConfigMutation object of the builder.
func (icc *ImplantConfigCreate) Mutation() *ImplantConfigMutation {
	return icc.mutation
}

// Save creates the ImplantConfig in the database.
func (icc *ImplantConfigCreate) Save(ctx context.Context) (*ImplantConfig, error) {
	var (
		err  error
		node *ImplantConfig
	)
	icc.defaults()
	if len(icc.hooks) == 0 {
		if err = icc.check(); err != nil {
			return nil, err
		}
		node, err = icc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = icc.check(); err != nil {
				return nil, err
			}
			icc.mutation = mutation
			if node, err = icc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(icc.hooks) - 1; i >= 0; i-- {
			if icc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = icc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, icc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (icc *ImplantConfigCreate) SaveX(ctx context.Context) *ImplantConfig {
	v, err := icc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icc *ImplantConfigCreate) Exec(ctx context.Context) error {
	_, err := icc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icc *ImplantConfigCreate) ExecX(ctx context.Context) {
	if err := icc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icc *ImplantConfigCreate) defaults() {
	if _, ok := icc.mutation.AuthToken(); !ok {
		v := implantconfig.DefaultAuthToken()
		icc.mutation.SetAuthToken(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (icc *ImplantConfigCreate) check() error {
	if _, ok := icc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ImplantConfig.name"`)}
	}
	if v, ok := icc.mutation.Name(); ok {
		if err := implantconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ImplantConfig.name": %w`, err)}
		}
	}
	if _, ok := icc.mutation.AuthToken(); !ok {
		return &ValidationError{Name: "authToken", err: errors.New(`ent: missing required field "ImplantConfig.authToken"`)}
	}
	return nil
}

func (icc *ImplantConfigCreate) sqlSave(ctx context.Context) (*ImplantConfig, error) {
	_node, _spec := icc.createSpec()
	if err := sqlgraph.CreateNode(ctx, icc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (icc *ImplantConfigCreate) createSpec() (*ImplantConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &ImplantConfig{config: icc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: implantconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implantconfig.FieldID,
			},
		}
	)
	if value, ok := icc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantconfig.FieldName,
		})
		_node.Name = value
	}
	if value, ok := icc.mutation.AuthToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantconfig.FieldAuthToken,
		})
		_node.AuthToken = value
	}
	if nodes := icc.mutation.DeploymentConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.DeploymentConfigsTable,
			Columns: []string{implantconfig.DeploymentConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := icc.mutation.ImplantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implantconfig.ImplantsTable,
			Columns: []string{implantconfig.ImplantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := icc.mutation.ServiceConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.ServiceConfigsTable,
			Columns: implantconfig.ServiceConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantserviceconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := icc.mutation.CallbackConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   implantconfig.CallbackConfigsTable,
			Columns: implantconfig.CallbackConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantcallbackconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImplantConfigCreateBulk is the builder for creating many ImplantConfig entities in bulk.
type ImplantConfigCreateBulk struct {
	config
	builders []*ImplantConfigCreate
}

// Save creates the ImplantConfig entities in the database.
func (iccb *ImplantConfigCreateBulk) Save(ctx context.Context) ([]*ImplantConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iccb.builders))
	nodes := make([]*ImplantConfig, len(iccb.builders))
	mutators := make([]Mutator, len(iccb.builders))
	for i := range iccb.builders {
		func(i int, root context.Context) {
			builder := iccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImplantConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iccb *ImplantConfigCreateBulk) SaveX(ctx context.Context) []*ImplantConfig {
	v, err := iccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iccb *ImplantConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := iccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccb *ImplantConfigCreateBulk) ExecX(ctx context.Context) {
	if err := iccb.Exec(ctx); err != nil {
		panic(err)
	}
}
