// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/tavern/ent/implantconfig"
	"github.com/kcarretto/realm/tavern/ent/implantserviceconfig"
	"github.com/kcarretto/realm/tavern/ent/predicate"
)

// ImplantServiceConfigUpdate is the builder for updating ImplantServiceConfig entities.
type ImplantServiceConfigUpdate struct {
	config
	hooks    []Hook
	mutation *ImplantServiceConfigMutation
}

// Where appends a list predicates to the ImplantServiceConfigUpdate builder.
func (iscu *ImplantServiceConfigUpdate) Where(ps ...predicate.ImplantServiceConfig) *ImplantServiceConfigUpdate {
	iscu.mutation.Where(ps...)
	return iscu
}

// SetName sets the "name" field.
func (iscu *ImplantServiceConfigUpdate) SetName(s string) *ImplantServiceConfigUpdate {
	iscu.mutation.SetName(s)
	return iscu
}

// SetDescription sets the "description" field.
func (iscu *ImplantServiceConfigUpdate) SetDescription(s string) *ImplantServiceConfigUpdate {
	iscu.mutation.SetDescription(s)
	return iscu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iscu *ImplantServiceConfigUpdate) SetNillableDescription(s *string) *ImplantServiceConfigUpdate {
	if s != nil {
		iscu.SetDescription(*s)
	}
	return iscu
}

// SetExecutablePath sets the "executablePath" field.
func (iscu *ImplantServiceConfigUpdate) SetExecutablePath(s string) *ImplantServiceConfigUpdate {
	iscu.mutation.SetExecutablePath(s)
	return iscu
}

// AddImplantConfigIDs adds the "implantConfigs" edge to the ImplantConfig entity by IDs.
func (iscu *ImplantServiceConfigUpdate) AddImplantConfigIDs(ids ...int) *ImplantServiceConfigUpdate {
	iscu.mutation.AddImplantConfigIDs(ids...)
	return iscu
}

// AddImplantConfigs adds the "implantConfigs" edges to the ImplantConfig entity.
func (iscu *ImplantServiceConfigUpdate) AddImplantConfigs(i ...*ImplantConfig) *ImplantServiceConfigUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iscu.AddImplantConfigIDs(ids...)
}

// Mutation returns the ImplantServiceConfigMutation object of the builder.
func (iscu *ImplantServiceConfigUpdate) Mutation() *ImplantServiceConfigMutation {
	return iscu.mutation
}

// ClearImplantConfigs clears all "implantConfigs" edges to the ImplantConfig entity.
func (iscu *ImplantServiceConfigUpdate) ClearImplantConfigs() *ImplantServiceConfigUpdate {
	iscu.mutation.ClearImplantConfigs()
	return iscu
}

// RemoveImplantConfigIDs removes the "implantConfigs" edge to ImplantConfig entities by IDs.
func (iscu *ImplantServiceConfigUpdate) RemoveImplantConfigIDs(ids ...int) *ImplantServiceConfigUpdate {
	iscu.mutation.RemoveImplantConfigIDs(ids...)
	return iscu
}

// RemoveImplantConfigs removes "implantConfigs" edges to ImplantConfig entities.
func (iscu *ImplantServiceConfigUpdate) RemoveImplantConfigs(i ...*ImplantConfig) *ImplantServiceConfigUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iscu.RemoveImplantConfigIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iscu *ImplantServiceConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iscu.hooks) == 0 {
		if err = iscu.check(); err != nil {
			return 0, err
		}
		affected, err = iscu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantServiceConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iscu.check(); err != nil {
				return 0, err
			}
			iscu.mutation = mutation
			affected, err = iscu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iscu.hooks) - 1; i >= 0; i-- {
			if iscu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iscu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iscu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iscu *ImplantServiceConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := iscu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iscu *ImplantServiceConfigUpdate) Exec(ctx context.Context) error {
	_, err := iscu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscu *ImplantServiceConfigUpdate) ExecX(ctx context.Context) {
	if err := iscu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iscu *ImplantServiceConfigUpdate) check() error {
	if v, ok := iscu.mutation.Name(); ok {
		if err := implantserviceconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ImplantServiceConfig.name": %w`, err)}
		}
	}
	if v, ok := iscu.mutation.ExecutablePath(); ok {
		if err := implantserviceconfig.ExecutablePathValidator(v); err != nil {
			return &ValidationError{Name: "executablePath", err: fmt.Errorf(`ent: validator failed for field "ImplantServiceConfig.executablePath": %w`, err)}
		}
	}
	return nil
}

func (iscu *ImplantServiceConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   implantserviceconfig.Table,
			Columns: implantserviceconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implantserviceconfig.FieldID,
			},
		},
	}
	if ps := iscu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iscu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantserviceconfig.FieldName,
		})
	}
	if value, ok := iscu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantserviceconfig.FieldDescription,
		})
	}
	if value, ok := iscu.mutation.ExecutablePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantserviceconfig.FieldExecutablePath,
		})
	}
	if iscu.mutation.ImplantConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantserviceconfig.ImplantConfigsTable,
			Columns: implantserviceconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iscu.mutation.RemovedImplantConfigsIDs(); len(nodes) > 0 && !iscu.mutation.ImplantConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantserviceconfig.ImplantConfigsTable,
			Columns: implantserviceconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iscu.mutation.ImplantConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantserviceconfig.ImplantConfigsTable,
			Columns: implantserviceconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iscu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{implantserviceconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ImplantServiceConfigUpdateOne is the builder for updating a single ImplantServiceConfig entity.
type ImplantServiceConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImplantServiceConfigMutation
}

// SetName sets the "name" field.
func (iscuo *ImplantServiceConfigUpdateOne) SetName(s string) *ImplantServiceConfigUpdateOne {
	iscuo.mutation.SetName(s)
	return iscuo
}

// SetDescription sets the "description" field.
func (iscuo *ImplantServiceConfigUpdateOne) SetDescription(s string) *ImplantServiceConfigUpdateOne {
	iscuo.mutation.SetDescription(s)
	return iscuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iscuo *ImplantServiceConfigUpdateOne) SetNillableDescription(s *string) *ImplantServiceConfigUpdateOne {
	if s != nil {
		iscuo.SetDescription(*s)
	}
	return iscuo
}

// SetExecutablePath sets the "executablePath" field.
func (iscuo *ImplantServiceConfigUpdateOne) SetExecutablePath(s string) *ImplantServiceConfigUpdateOne {
	iscuo.mutation.SetExecutablePath(s)
	return iscuo
}

// AddImplantConfigIDs adds the "implantConfigs" edge to the ImplantConfig entity by IDs.
func (iscuo *ImplantServiceConfigUpdateOne) AddImplantConfigIDs(ids ...int) *ImplantServiceConfigUpdateOne {
	iscuo.mutation.AddImplantConfigIDs(ids...)
	return iscuo
}

// AddImplantConfigs adds the "implantConfigs" edges to the ImplantConfig entity.
func (iscuo *ImplantServiceConfigUpdateOne) AddImplantConfigs(i ...*ImplantConfig) *ImplantServiceConfigUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iscuo.AddImplantConfigIDs(ids...)
}

// Mutation returns the ImplantServiceConfigMutation object of the builder.
func (iscuo *ImplantServiceConfigUpdateOne) Mutation() *ImplantServiceConfigMutation {
	return iscuo.mutation
}

// ClearImplantConfigs clears all "implantConfigs" edges to the ImplantConfig entity.
func (iscuo *ImplantServiceConfigUpdateOne) ClearImplantConfigs() *ImplantServiceConfigUpdateOne {
	iscuo.mutation.ClearImplantConfigs()
	return iscuo
}

// RemoveImplantConfigIDs removes the "implantConfigs" edge to ImplantConfig entities by IDs.
func (iscuo *ImplantServiceConfigUpdateOne) RemoveImplantConfigIDs(ids ...int) *ImplantServiceConfigUpdateOne {
	iscuo.mutation.RemoveImplantConfigIDs(ids...)
	return iscuo
}

// RemoveImplantConfigs removes "implantConfigs" edges to ImplantConfig entities.
func (iscuo *ImplantServiceConfigUpdateOne) RemoveImplantConfigs(i ...*ImplantConfig) *ImplantServiceConfigUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iscuo.RemoveImplantConfigIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iscuo *ImplantServiceConfigUpdateOne) Select(field string, fields ...string) *ImplantServiceConfigUpdateOne {
	iscuo.fields = append([]string{field}, fields...)
	return iscuo
}

// Save executes the query and returns the updated ImplantServiceConfig entity.
func (iscuo *ImplantServiceConfigUpdateOne) Save(ctx context.Context) (*ImplantServiceConfig, error) {
	var (
		err  error
		node *ImplantServiceConfig
	)
	if len(iscuo.hooks) == 0 {
		if err = iscuo.check(); err != nil {
			return nil, err
		}
		node, err = iscuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantServiceConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iscuo.check(); err != nil {
				return nil, err
			}
			iscuo.mutation = mutation
			node, err = iscuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iscuo.hooks) - 1; i >= 0; i-- {
			if iscuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iscuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iscuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iscuo *ImplantServiceConfigUpdateOne) SaveX(ctx context.Context) *ImplantServiceConfig {
	node, err := iscuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iscuo *ImplantServiceConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := iscuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscuo *ImplantServiceConfigUpdateOne) ExecX(ctx context.Context) {
	if err := iscuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iscuo *ImplantServiceConfigUpdateOne) check() error {
	if v, ok := iscuo.mutation.Name(); ok {
		if err := implantserviceconfig.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ImplantServiceConfig.name": %w`, err)}
		}
	}
	if v, ok := iscuo.mutation.ExecutablePath(); ok {
		if err := implantserviceconfig.ExecutablePathValidator(v); err != nil {
			return &ValidationError{Name: "executablePath", err: fmt.Errorf(`ent: validator failed for field "ImplantServiceConfig.executablePath": %w`, err)}
		}
	}
	return nil
}

func (iscuo *ImplantServiceConfigUpdateOne) sqlSave(ctx context.Context) (_node *ImplantServiceConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   implantserviceconfig.Table,
			Columns: implantserviceconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implantserviceconfig.FieldID,
			},
		},
	}
	id, ok := iscuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImplantServiceConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iscuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, implantserviceconfig.FieldID)
		for _, f := range fields {
			if !implantserviceconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != implantserviceconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iscuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iscuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantserviceconfig.FieldName,
		})
	}
	if value, ok := iscuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantserviceconfig.FieldDescription,
		})
	}
	if value, ok := iscuo.mutation.ExecutablePath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantserviceconfig.FieldExecutablePath,
		})
	}
	if iscuo.mutation.ImplantConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantserviceconfig.ImplantConfigsTable,
			Columns: implantserviceconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iscuo.mutation.RemovedImplantConfigsIDs(); len(nodes) > 0 && !iscuo.mutation.ImplantConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantserviceconfig.ImplantConfigsTable,
			Columns: implantserviceconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iscuo.mutation.ImplantConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantserviceconfig.ImplantConfigsTable,
			Columns: implantserviceconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImplantServiceConfig{config: iscuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iscuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{implantserviceconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
