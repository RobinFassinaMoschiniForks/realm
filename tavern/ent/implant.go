// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/kcarretto/realm/tavern/ent/implant"
	"github.com/kcarretto/realm/tavern/ent/implantconfig"
	"github.com/kcarretto/realm/tavern/ent/target"
)

// Implant is the model entity for the Implant schema.
type Implant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SessionID holds the value of the "sessionID" field.
	// Unique identifier for this instance of the implant (if it's running).
	SessionID string `json:"sessionID,omitempty"`
	// ProcessName holds the value of the "processName" field.
	// Name of the process this implant is running as.
	ProcessName string `json:"processName,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImplantQuery when eager-loading is set.
	Edges          ImplantEdges `json:"edges"`
	implant_target *int
	implant_config *int
}

// ImplantEdges holds the relations/edges for other nodes in the graph.
type ImplantEdges struct {
	// Target holds the value of the target edge.
	Target *Target `json:"target,omitempty"`
	// Config holds the value of the config edge.
	Config *ImplantConfig `json:"config,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TargetOrErr returns the Target value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImplantEdges) TargetOrErr() (*Target, error) {
	if e.loadedTypes[0] {
		if e.Target == nil {
			// The edge target was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: target.Label}
		}
		return e.Target, nil
	}
	return nil, &NotLoadedError{edge: "target"}
}

// ConfigOrErr returns the Config value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImplantEdges) ConfigOrErr() (*ImplantConfig, error) {
	if e.loadedTypes[1] {
		if e.Config == nil {
			// The edge config was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: implantconfig.Label}
		}
		return e.Config, nil
	}
	return nil, &NotLoadedError{edge: "config"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Implant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case implant.FieldID:
			values[i] = new(sql.NullInt64)
		case implant.FieldSessionID, implant.FieldProcessName:
			values[i] = new(sql.NullString)
		case implant.ForeignKeys[0]: // implant_target
			values[i] = new(sql.NullInt64)
		case implant.ForeignKeys[1]: // implant_config
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Implant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Implant fields.
func (i *Implant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case implant.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case implant.FieldSessionID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sessionID", values[j])
			} else if value.Valid {
				i.SessionID = value.String
			}
		case implant.FieldProcessName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field processName", values[j])
			} else if value.Valid {
				i.ProcessName = value.String
			}
		case implant.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field implant_target", value)
			} else if value.Valid {
				i.implant_target = new(int)
				*i.implant_target = int(value.Int64)
			}
		case implant.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field implant_config", value)
			} else if value.Valid {
				i.implant_config = new(int)
				*i.implant_config = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTarget queries the "target" edge of the Implant entity.
func (i *Implant) QueryTarget() *TargetQuery {
	return (&ImplantClient{config: i.config}).QueryTarget(i)
}

// QueryConfig queries the "config" edge of the Implant entity.
func (i *Implant) QueryConfig() *ImplantConfigQuery {
	return (&ImplantClient{config: i.config}).QueryConfig(i)
}

// Update returns a builder for updating this Implant.
// Note that you need to call Implant.Unwrap() before calling this method if this Implant
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Implant) Update() *ImplantUpdateOne {
	return (&ImplantClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Implant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Implant) Unwrap() *Implant {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Implant is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Implant) String() string {
	var builder strings.Builder
	builder.WriteString("Implant(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", sessionID=")
	builder.WriteString(i.SessionID)
	builder.WriteString(", processName=")
	builder.WriteString(i.ProcessName)
	builder.WriteByte(')')
	return builder.String()
}

// Implants is a parsable slice of Implant.
type Implants []*Implant

func (i Implants) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
