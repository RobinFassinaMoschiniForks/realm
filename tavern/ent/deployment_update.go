// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/tavern/ent/deployment"
	"github.com/kcarretto/realm/tavern/ent/deploymentconfig"
	"github.com/kcarretto/realm/tavern/ent/predicate"
	"github.com/kcarretto/realm/tavern/ent/target"
)

// DeploymentUpdate is the builder for updating Deployment entities.
type DeploymentUpdate struct {
	config
	hooks    []Hook
	mutation *DeploymentMutation
}

// Where appends a list predicates to the DeploymentUpdate builder.
func (du *DeploymentUpdate) Where(ps ...predicate.Deployment) *DeploymentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetOutput sets the "output" field.
func (du *DeploymentUpdate) SetOutput(s string) *DeploymentUpdate {
	du.mutation.SetOutput(s)
	return du
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableOutput(s *string) *DeploymentUpdate {
	if s != nil {
		du.SetOutput(*s)
	}
	return du
}

// SetError sets the "error" field.
func (du *DeploymentUpdate) SetError(s string) *DeploymentUpdate {
	du.mutation.SetError(s)
	return du
}

// SetNillableError sets the "error" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableError(s *string) *DeploymentUpdate {
	if s != nil {
		du.SetError(*s)
	}
	return du
}

// SetQueuedAt sets the "queuedAt" field.
func (du *DeploymentUpdate) SetQueuedAt(t time.Time) *DeploymentUpdate {
	du.mutation.SetQueuedAt(t)
	return du
}

// SetNillableQueuedAt sets the "queuedAt" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableQueuedAt(t *time.Time) *DeploymentUpdate {
	if t != nil {
		du.SetQueuedAt(*t)
	}
	return du
}

// SetLastModifiedAt sets the "lastModifiedAt" field.
func (du *DeploymentUpdate) SetLastModifiedAt(t time.Time) *DeploymentUpdate {
	du.mutation.SetLastModifiedAt(t)
	return du
}

// SetNillableLastModifiedAt sets the "lastModifiedAt" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableLastModifiedAt(t *time.Time) *DeploymentUpdate {
	if t != nil {
		du.SetLastModifiedAt(*t)
	}
	return du
}

// SetStartedAt sets the "startedAt" field.
func (du *DeploymentUpdate) SetStartedAt(t time.Time) *DeploymentUpdate {
	du.mutation.SetStartedAt(t)
	return du
}

// SetNillableStartedAt sets the "startedAt" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableStartedAt(t *time.Time) *DeploymentUpdate {
	if t != nil {
		du.SetStartedAt(*t)
	}
	return du
}

// ClearStartedAt clears the value of the "startedAt" field.
func (du *DeploymentUpdate) ClearStartedAt() *DeploymentUpdate {
	du.mutation.ClearStartedAt()
	return du
}

// SetFinishedAt sets the "finishedAt" field.
func (du *DeploymentUpdate) SetFinishedAt(t time.Time) *DeploymentUpdate {
	du.mutation.SetFinishedAt(t)
	return du
}

// SetNillableFinishedAt sets the "finishedAt" field if the given value is not nil.
func (du *DeploymentUpdate) SetNillableFinishedAt(t *time.Time) *DeploymentUpdate {
	if t != nil {
		du.SetFinishedAt(*t)
	}
	return du
}

// ClearFinishedAt clears the value of the "finishedAt" field.
func (du *DeploymentUpdate) ClearFinishedAt() *DeploymentUpdate {
	du.mutation.ClearFinishedAt()
	return du
}

// SetConfigID sets the "config" edge to the DeploymentConfig entity by ID.
func (du *DeploymentUpdate) SetConfigID(id int) *DeploymentUpdate {
	du.mutation.SetConfigID(id)
	return du
}

// SetConfig sets the "config" edge to the DeploymentConfig entity.
func (du *DeploymentUpdate) SetConfig(d *DeploymentConfig) *DeploymentUpdate {
	return du.SetConfigID(d.ID)
}

// SetTargetID sets the "target" edge to the Target entity by ID.
func (du *DeploymentUpdate) SetTargetID(id int) *DeploymentUpdate {
	du.mutation.SetTargetID(id)
	return du
}

// SetTarget sets the "target" edge to the Target entity.
func (du *DeploymentUpdate) SetTarget(t *Target) *DeploymentUpdate {
	return du.SetTargetID(t.ID)
}

// Mutation returns the DeploymentMutation object of the builder.
func (du *DeploymentUpdate) Mutation() *DeploymentMutation {
	return du.mutation
}

// ClearConfig clears the "config" edge to the DeploymentConfig entity.
func (du *DeploymentUpdate) ClearConfig() *DeploymentUpdate {
	du.mutation.ClearConfig()
	return du
}

// ClearTarget clears the "target" edge to the Target entity.
func (du *DeploymentUpdate) ClearTarget() *DeploymentUpdate {
	du.mutation.ClearTarget()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeploymentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeploymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeploymentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeploymentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeploymentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DeploymentUpdate) check() error {
	if _, ok := du.mutation.ConfigID(); du.mutation.ConfigCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Deployment.config"`)
	}
	if _, ok := du.mutation.TargetID(); du.mutation.TargetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Deployment.target"`)
	}
	return nil
}

func (du *DeploymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deployment.Table,
			Columns: deployment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deployment.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldOutput,
		})
	}
	if value, ok := du.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldError,
		})
	}
	if value, ok := du.mutation.QueuedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldQueuedAt,
		})
	}
	if value, ok := du.mutation.LastModifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldLastModifiedAt,
		})
	}
	if value, ok := du.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldStartedAt,
		})
	}
	if du.mutation.StartedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: deployment.FieldStartedAt,
		})
	}
	if value, ok := du.mutation.FinishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldFinishedAt,
		})
	}
	if du.mutation.FinishedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: deployment.FieldFinishedAt,
		})
	}
	if du.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deployment.ConfigTable,
			Columns: []string{deployment.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deployment.ConfigTable,
			Columns: []string{deployment.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deployment.TargetTable,
			Columns: []string{deployment.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deployment.TargetTable,
			Columns: []string{deployment.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deployment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DeploymentUpdateOne is the builder for updating a single Deployment entity.
type DeploymentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeploymentMutation
}

// SetOutput sets the "output" field.
func (duo *DeploymentUpdateOne) SetOutput(s string) *DeploymentUpdateOne {
	duo.mutation.SetOutput(s)
	return duo
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableOutput(s *string) *DeploymentUpdateOne {
	if s != nil {
		duo.SetOutput(*s)
	}
	return duo
}

// SetError sets the "error" field.
func (duo *DeploymentUpdateOne) SetError(s string) *DeploymentUpdateOne {
	duo.mutation.SetError(s)
	return duo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableError(s *string) *DeploymentUpdateOne {
	if s != nil {
		duo.SetError(*s)
	}
	return duo
}

// SetQueuedAt sets the "queuedAt" field.
func (duo *DeploymentUpdateOne) SetQueuedAt(t time.Time) *DeploymentUpdateOne {
	duo.mutation.SetQueuedAt(t)
	return duo
}

// SetNillableQueuedAt sets the "queuedAt" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableQueuedAt(t *time.Time) *DeploymentUpdateOne {
	if t != nil {
		duo.SetQueuedAt(*t)
	}
	return duo
}

// SetLastModifiedAt sets the "lastModifiedAt" field.
func (duo *DeploymentUpdateOne) SetLastModifiedAt(t time.Time) *DeploymentUpdateOne {
	duo.mutation.SetLastModifiedAt(t)
	return duo
}

// SetNillableLastModifiedAt sets the "lastModifiedAt" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableLastModifiedAt(t *time.Time) *DeploymentUpdateOne {
	if t != nil {
		duo.SetLastModifiedAt(*t)
	}
	return duo
}

// SetStartedAt sets the "startedAt" field.
func (duo *DeploymentUpdateOne) SetStartedAt(t time.Time) *DeploymentUpdateOne {
	duo.mutation.SetStartedAt(t)
	return duo
}

// SetNillableStartedAt sets the "startedAt" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableStartedAt(t *time.Time) *DeploymentUpdateOne {
	if t != nil {
		duo.SetStartedAt(*t)
	}
	return duo
}

// ClearStartedAt clears the value of the "startedAt" field.
func (duo *DeploymentUpdateOne) ClearStartedAt() *DeploymentUpdateOne {
	duo.mutation.ClearStartedAt()
	return duo
}

// SetFinishedAt sets the "finishedAt" field.
func (duo *DeploymentUpdateOne) SetFinishedAt(t time.Time) *DeploymentUpdateOne {
	duo.mutation.SetFinishedAt(t)
	return duo
}

// SetNillableFinishedAt sets the "finishedAt" field if the given value is not nil.
func (duo *DeploymentUpdateOne) SetNillableFinishedAt(t *time.Time) *DeploymentUpdateOne {
	if t != nil {
		duo.SetFinishedAt(*t)
	}
	return duo
}

// ClearFinishedAt clears the value of the "finishedAt" field.
func (duo *DeploymentUpdateOne) ClearFinishedAt() *DeploymentUpdateOne {
	duo.mutation.ClearFinishedAt()
	return duo
}

// SetConfigID sets the "config" edge to the DeploymentConfig entity by ID.
func (duo *DeploymentUpdateOne) SetConfigID(id int) *DeploymentUpdateOne {
	duo.mutation.SetConfigID(id)
	return duo
}

// SetConfig sets the "config" edge to the DeploymentConfig entity.
func (duo *DeploymentUpdateOne) SetConfig(d *DeploymentConfig) *DeploymentUpdateOne {
	return duo.SetConfigID(d.ID)
}

// SetTargetID sets the "target" edge to the Target entity by ID.
func (duo *DeploymentUpdateOne) SetTargetID(id int) *DeploymentUpdateOne {
	duo.mutation.SetTargetID(id)
	return duo
}

// SetTarget sets the "target" edge to the Target entity.
func (duo *DeploymentUpdateOne) SetTarget(t *Target) *DeploymentUpdateOne {
	return duo.SetTargetID(t.ID)
}

// Mutation returns the DeploymentMutation object of the builder.
func (duo *DeploymentUpdateOne) Mutation() *DeploymentMutation {
	return duo.mutation
}

// ClearConfig clears the "config" edge to the DeploymentConfig entity.
func (duo *DeploymentUpdateOne) ClearConfig() *DeploymentUpdateOne {
	duo.mutation.ClearConfig()
	return duo
}

// ClearTarget clears the "target" edge to the Target entity.
func (duo *DeploymentUpdateOne) ClearTarget() *DeploymentUpdateOne {
	duo.mutation.ClearTarget()
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeploymentUpdateOne) Select(field string, fields ...string) *DeploymentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Deployment entity.
func (duo *DeploymentUpdateOne) Save(ctx context.Context) (*Deployment, error) {
	var (
		err  error
		node *Deployment
	)
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeploymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeploymentUpdateOne) SaveX(ctx context.Context) *Deployment {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeploymentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeploymentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DeploymentUpdateOne) check() error {
	if _, ok := duo.mutation.ConfigID(); duo.mutation.ConfigCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Deployment.config"`)
	}
	if _, ok := duo.mutation.TargetID(); duo.mutation.TargetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Deployment.target"`)
	}
	return nil
}

func (duo *DeploymentUpdateOne) sqlSave(ctx context.Context) (_node *Deployment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deployment.Table,
			Columns: deployment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deployment.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Deployment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deployment.FieldID)
		for _, f := range fields {
			if !deployment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deployment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Output(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldOutput,
		})
	}
	if value, ok := duo.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deployment.FieldError,
		})
	}
	if value, ok := duo.mutation.QueuedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldQueuedAt,
		})
	}
	if value, ok := duo.mutation.LastModifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldLastModifiedAt,
		})
	}
	if value, ok := duo.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldStartedAt,
		})
	}
	if duo.mutation.StartedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: deployment.FieldStartedAt,
		})
	}
	if value, ok := duo.mutation.FinishedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deployment.FieldFinishedAt,
		})
	}
	if duo.mutation.FinishedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: deployment.FieldFinishedAt,
		})
	}
	if duo.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deployment.ConfigTable,
			Columns: []string{deployment.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deployment.ConfigTable,
			Columns: []string{deployment.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deploymentconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deployment.TargetTable,
			Columns: []string{deployment.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deployment.TargetTable,
			Columns: []string{deployment.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: target.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Deployment{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deployment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
