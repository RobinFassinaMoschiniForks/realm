// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/tavern/ent/implantcallbackconfig"
	"github.com/kcarretto/realm/tavern/ent/implantconfig"
)

// ImplantCallbackConfigCreate is the builder for creating a ImplantCallbackConfig entity.
type ImplantCallbackConfigCreate struct {
	config
	mutation *ImplantCallbackConfigMutation
	hooks    []Hook
}

// SetURI sets the "uri" field.
func (iccc *ImplantCallbackConfigCreate) SetURI(s string) *ImplantCallbackConfigCreate {
	iccc.mutation.SetURI(s)
	return iccc
}

// SetProxyURI sets the "proxyURI" field.
func (iccc *ImplantCallbackConfigCreate) SetProxyURI(s string) *ImplantCallbackConfigCreate {
	iccc.mutation.SetProxyURI(s)
	return iccc
}

// SetNillableProxyURI sets the "proxyURI" field if the given value is not nil.
func (iccc *ImplantCallbackConfigCreate) SetNillableProxyURI(s *string) *ImplantCallbackConfigCreate {
	if s != nil {
		iccc.SetProxyURI(*s)
	}
	return iccc
}

// SetPriority sets the "priority" field.
func (iccc *ImplantCallbackConfigCreate) SetPriority(i int) *ImplantCallbackConfigCreate {
	iccc.mutation.SetPriority(i)
	return iccc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (iccc *ImplantCallbackConfigCreate) SetNillablePriority(i *int) *ImplantCallbackConfigCreate {
	if i != nil {
		iccc.SetPriority(*i)
	}
	return iccc
}

// SetTimeout sets the "timeout" field.
func (iccc *ImplantCallbackConfigCreate) SetTimeout(i int) *ImplantCallbackConfigCreate {
	iccc.mutation.SetTimeout(i)
	return iccc
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (iccc *ImplantCallbackConfigCreate) SetNillableTimeout(i *int) *ImplantCallbackConfigCreate {
	if i != nil {
		iccc.SetTimeout(*i)
	}
	return iccc
}

// SetInterval sets the "interval" field.
func (iccc *ImplantCallbackConfigCreate) SetInterval(i int) *ImplantCallbackConfigCreate {
	iccc.mutation.SetInterval(i)
	return iccc
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (iccc *ImplantCallbackConfigCreate) SetNillableInterval(i *int) *ImplantCallbackConfigCreate {
	if i != nil {
		iccc.SetInterval(*i)
	}
	return iccc
}

// SetJitter sets the "jitter" field.
func (iccc *ImplantCallbackConfigCreate) SetJitter(i int) *ImplantCallbackConfigCreate {
	iccc.mutation.SetJitter(i)
	return iccc
}

// SetNillableJitter sets the "jitter" field if the given value is not nil.
func (iccc *ImplantCallbackConfigCreate) SetNillableJitter(i *int) *ImplantCallbackConfigCreate {
	if i != nil {
		iccc.SetJitter(*i)
	}
	return iccc
}

// AddImplantConfigIDs adds the "implantConfigs" edge to the ImplantConfig entity by IDs.
func (iccc *ImplantCallbackConfigCreate) AddImplantConfigIDs(ids ...int) *ImplantCallbackConfigCreate {
	iccc.mutation.AddImplantConfigIDs(ids...)
	return iccc
}

// AddImplantConfigs adds the "implantConfigs" edges to the ImplantConfig entity.
func (iccc *ImplantCallbackConfigCreate) AddImplantConfigs(i ...*ImplantConfig) *ImplantCallbackConfigCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iccc.AddImplantConfigIDs(ids...)
}

// Mutation returns the ImplantCallbackConfigMutation object of the builder.
func (iccc *ImplantCallbackConfigCreate) Mutation() *ImplantCallbackConfigMutation {
	return iccc.mutation
}

// Save creates the ImplantCallbackConfig in the database.
func (iccc *ImplantCallbackConfigCreate) Save(ctx context.Context) (*ImplantCallbackConfig, error) {
	var (
		err  error
		node *ImplantCallbackConfig
	)
	iccc.defaults()
	if len(iccc.hooks) == 0 {
		if err = iccc.check(); err != nil {
			return nil, err
		}
		node, err = iccc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantCallbackConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iccc.check(); err != nil {
				return nil, err
			}
			iccc.mutation = mutation
			if node, err = iccc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(iccc.hooks) - 1; i >= 0; i-- {
			if iccc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iccc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iccc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (iccc *ImplantCallbackConfigCreate) SaveX(ctx context.Context) *ImplantCallbackConfig {
	v, err := iccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iccc *ImplantCallbackConfigCreate) Exec(ctx context.Context) error {
	_, err := iccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccc *ImplantCallbackConfigCreate) ExecX(ctx context.Context) {
	if err := iccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iccc *ImplantCallbackConfigCreate) defaults() {
	if _, ok := iccc.mutation.Priority(); !ok {
		v := implantcallbackconfig.DefaultPriority
		iccc.mutation.SetPriority(v)
	}
	if _, ok := iccc.mutation.Timeout(); !ok {
		v := implantcallbackconfig.DefaultTimeout
		iccc.mutation.SetTimeout(v)
	}
	if _, ok := iccc.mutation.Interval(); !ok {
		v := implantcallbackconfig.DefaultInterval
		iccc.mutation.SetInterval(v)
	}
	if _, ok := iccc.mutation.Jitter(); !ok {
		v := implantcallbackconfig.DefaultJitter
		iccc.mutation.SetJitter(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iccc *ImplantCallbackConfigCreate) check() error {
	if _, ok := iccc.mutation.URI(); !ok {
		return &ValidationError{Name: "uri", err: errors.New(`ent: missing required field "ImplantCallbackConfig.uri"`)}
	}
	if v, ok := iccc.mutation.URI(); ok {
		if err := implantcallbackconfig.URIValidator(v); err != nil {
			return &ValidationError{Name: "uri", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.uri": %w`, err)}
		}
	}
	if _, ok := iccc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "ImplantCallbackConfig.priority"`)}
	}
	if v, ok := iccc.mutation.Priority(); ok {
		if err := implantcallbackconfig.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.priority": %w`, err)}
		}
	}
	if _, ok := iccc.mutation.Timeout(); !ok {
		return &ValidationError{Name: "timeout", err: errors.New(`ent: missing required field "ImplantCallbackConfig.timeout"`)}
	}
	if v, ok := iccc.mutation.Timeout(); ok {
		if err := implantcallbackconfig.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.timeout": %w`, err)}
		}
	}
	if _, ok := iccc.mutation.Interval(); !ok {
		return &ValidationError{Name: "interval", err: errors.New(`ent: missing required field "ImplantCallbackConfig.interval"`)}
	}
	if v, ok := iccc.mutation.Interval(); ok {
		if err := implantcallbackconfig.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.interval": %w`, err)}
		}
	}
	if _, ok := iccc.mutation.Jitter(); !ok {
		return &ValidationError{Name: "jitter", err: errors.New(`ent: missing required field "ImplantCallbackConfig.jitter"`)}
	}
	if v, ok := iccc.mutation.Jitter(); ok {
		if err := implantcallbackconfig.JitterValidator(v); err != nil {
			return &ValidationError{Name: "jitter", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.jitter": %w`, err)}
		}
	}
	return nil
}

func (iccc *ImplantCallbackConfigCreate) sqlSave(ctx context.Context) (*ImplantCallbackConfig, error) {
	_node, _spec := iccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (iccc *ImplantCallbackConfigCreate) createSpec() (*ImplantCallbackConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &ImplantCallbackConfig{config: iccc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: implantcallbackconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implantcallbackconfig.FieldID,
			},
		}
	)
	if value, ok := iccc.mutation.URI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantcallbackconfig.FieldURI,
		})
		_node.URI = value
	}
	if value, ok := iccc.mutation.ProxyURI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantcallbackconfig.FieldProxyURI,
		})
		_node.ProxyURI = value
	}
	if value, ok := iccc.mutation.Priority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldPriority,
		})
		_node.Priority = value
	}
	if value, ok := iccc.mutation.Timeout(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldTimeout,
		})
		_node.Timeout = value
	}
	if value, ok := iccc.mutation.Interval(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldInterval,
		})
		_node.Interval = value
	}
	if value, ok := iccc.mutation.Jitter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldJitter,
		})
		_node.Jitter = value
	}
	if nodes := iccc.mutation.ImplantConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantcallbackconfig.ImplantConfigsTable,
			Columns: implantcallbackconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImplantCallbackConfigCreateBulk is the builder for creating many ImplantCallbackConfig entities in bulk.
type ImplantCallbackConfigCreateBulk struct {
	config
	builders []*ImplantCallbackConfigCreate
}

// Save creates the ImplantCallbackConfig entities in the database.
func (icccb *ImplantCallbackConfigCreateBulk) Save(ctx context.Context) ([]*ImplantCallbackConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icccb.builders))
	nodes := make([]*ImplantCallbackConfig, len(icccb.builders))
	mutators := make([]Mutator, len(icccb.builders))
	for i := range icccb.builders {
		func(i int, root context.Context) {
			builder := icccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImplantCallbackConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icccb *ImplantCallbackConfigCreateBulk) SaveX(ctx context.Context) []*ImplantCallbackConfig {
	v, err := icccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icccb *ImplantCallbackConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := icccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icccb *ImplantCallbackConfigCreateBulk) ExecX(ctx context.Context) {
	if err := icccb.Exec(ctx); err != nil {
		panic(err)
	}
}
