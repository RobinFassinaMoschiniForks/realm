// Code generated by entc, DO NOT EDIT.

package implantcallbackconfig

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kcarretto/realm/tavern/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURI), v))
	})
}

// ProxyURI applies equality check predicate on the "proxyURI" field. It's identical to ProxyURIEQ.
func ProxyURI(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProxyURI), v))
	})
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriority), v))
	})
}

// Timeout applies equality check predicate on the "timeout" field. It's identical to TimeoutEQ.
func Timeout(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeout), v))
	})
}

// Interval applies equality check predicate on the "interval" field. It's identical to IntervalEQ.
func Interval(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterval), v))
	})
}

// Jitter applies equality check predicate on the "jitter" field. It's identical to JitterEQ.
func Jitter(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJitter), v))
	})
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURI), v))
	})
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURI), v))
	})
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.ImplantCallbackConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldURI), v...))
	})
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.ImplantCallbackConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldURI), v...))
	})
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURI), v))
	})
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURI), v))
	})
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURI), v))
	})
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURI), v))
	})
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURI), v))
	})
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURI), v))
	})
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURI), v))
	})
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURI), v))
	})
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURI), v))
	})
}

// ProxyURIEQ applies the EQ predicate on the "proxyURI" field.
func ProxyURIEQ(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProxyURI), v))
	})
}

// ProxyURINEQ applies the NEQ predicate on the "proxyURI" field.
func ProxyURINEQ(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProxyURI), v))
	})
}

// ProxyURIIn applies the In predicate on the "proxyURI" field.
func ProxyURIIn(vs ...string) predicate.ImplantCallbackConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProxyURI), v...))
	})
}

// ProxyURINotIn applies the NotIn predicate on the "proxyURI" field.
func ProxyURINotIn(vs ...string) predicate.ImplantCallbackConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProxyURI), v...))
	})
}

// ProxyURIGT applies the GT predicate on the "proxyURI" field.
func ProxyURIGT(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProxyURI), v))
	})
}

// ProxyURIGTE applies the GTE predicate on the "proxyURI" field.
func ProxyURIGTE(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProxyURI), v))
	})
}

// ProxyURILT applies the LT predicate on the "proxyURI" field.
func ProxyURILT(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProxyURI), v))
	})
}

// ProxyURILTE applies the LTE predicate on the "proxyURI" field.
func ProxyURILTE(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProxyURI), v))
	})
}

// ProxyURIContains applies the Contains predicate on the "proxyURI" field.
func ProxyURIContains(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProxyURI), v))
	})
}

// ProxyURIHasPrefix applies the HasPrefix predicate on the "proxyURI" field.
func ProxyURIHasPrefix(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProxyURI), v))
	})
}

// ProxyURIHasSuffix applies the HasSuffix predicate on the "proxyURI" field.
func ProxyURIHasSuffix(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProxyURI), v))
	})
}

// ProxyURIIsNil applies the IsNil predicate on the "proxyURI" field.
func ProxyURIIsNil() predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProxyURI)))
	})
}

// ProxyURINotNil applies the NotNil predicate on the "proxyURI" field.
func ProxyURINotNil() predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProxyURI)))
	})
}

// ProxyURIEqualFold applies the EqualFold predicate on the "proxyURI" field.
func ProxyURIEqualFold(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProxyURI), v))
	})
}

// ProxyURIContainsFold applies the ContainsFold predicate on the "proxyURI" field.
func ProxyURIContainsFold(v string) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProxyURI), v))
	})
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriority), v))
	})
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriority), v))
	})
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int) predicate.ImplantCallbackConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPriority), v...))
	})
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int) predicate.ImplantCallbackConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPriority), v...))
	})
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriority), v))
	})
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriority), v))
	})
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriority), v))
	})
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriority), v))
	})
}

// TimeoutEQ applies the EQ predicate on the "timeout" field.
func TimeoutEQ(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeout), v))
	})
}

// TimeoutNEQ applies the NEQ predicate on the "timeout" field.
func TimeoutNEQ(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeout), v))
	})
}

// TimeoutIn applies the In predicate on the "timeout" field.
func TimeoutIn(vs ...int) predicate.ImplantCallbackConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimeout), v...))
	})
}

// TimeoutNotIn applies the NotIn predicate on the "timeout" field.
func TimeoutNotIn(vs ...int) predicate.ImplantCallbackConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimeout), v...))
	})
}

// TimeoutGT applies the GT predicate on the "timeout" field.
func TimeoutGT(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimeout), v))
	})
}

// TimeoutGTE applies the GTE predicate on the "timeout" field.
func TimeoutGTE(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimeout), v))
	})
}

// TimeoutLT applies the LT predicate on the "timeout" field.
func TimeoutLT(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimeout), v))
	})
}

// TimeoutLTE applies the LTE predicate on the "timeout" field.
func TimeoutLTE(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimeout), v))
	})
}

// IntervalEQ applies the EQ predicate on the "interval" field.
func IntervalEQ(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInterval), v))
	})
}

// IntervalNEQ applies the NEQ predicate on the "interval" field.
func IntervalNEQ(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInterval), v))
	})
}

// IntervalIn applies the In predicate on the "interval" field.
func IntervalIn(vs ...int) predicate.ImplantCallbackConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInterval), v...))
	})
}

// IntervalNotIn applies the NotIn predicate on the "interval" field.
func IntervalNotIn(vs ...int) predicate.ImplantCallbackConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInterval), v...))
	})
}

// IntervalGT applies the GT predicate on the "interval" field.
func IntervalGT(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInterval), v))
	})
}

// IntervalGTE applies the GTE predicate on the "interval" field.
func IntervalGTE(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInterval), v))
	})
}

// IntervalLT applies the LT predicate on the "interval" field.
func IntervalLT(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInterval), v))
	})
}

// IntervalLTE applies the LTE predicate on the "interval" field.
func IntervalLTE(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInterval), v))
	})
}

// JitterEQ applies the EQ predicate on the "jitter" field.
func JitterEQ(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJitter), v))
	})
}

// JitterNEQ applies the NEQ predicate on the "jitter" field.
func JitterNEQ(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJitter), v))
	})
}

// JitterIn applies the In predicate on the "jitter" field.
func JitterIn(vs ...int) predicate.ImplantCallbackConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJitter), v...))
	})
}

// JitterNotIn applies the NotIn predicate on the "jitter" field.
func JitterNotIn(vs ...int) predicate.ImplantCallbackConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJitter), v...))
	})
}

// JitterGT applies the GT predicate on the "jitter" field.
func JitterGT(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJitter), v))
	})
}

// JitterGTE applies the GTE predicate on the "jitter" field.
func JitterGTE(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJitter), v))
	})
}

// JitterLT applies the LT predicate on the "jitter" field.
func JitterLT(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJitter), v))
	})
}

// JitterLTE applies the LTE predicate on the "jitter" field.
func JitterLTE(v int) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJitter), v))
	})
}

// HasImplantConfigs applies the HasEdge predicate on the "implantConfigs" edge.
func HasImplantConfigs() predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ImplantConfigsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ImplantConfigsTable, ImplantConfigsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImplantConfigsWith applies the HasEdge predicate on the "implantConfigs" edge with a given conditions (other predicates).
func HasImplantConfigsWith(preds ...predicate.ImplantConfig) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ImplantConfigsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ImplantConfigsTable, ImplantConfigsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ImplantCallbackConfig) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ImplantCallbackConfig) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ImplantCallbackConfig) predicate.ImplantCallbackConfig {
	return predicate.ImplantCallbackConfig(func(s *sql.Selector) {
		p(s.Not())
	})
}
