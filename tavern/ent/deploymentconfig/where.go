// Code generated by entc, DO NOT EDIT.

package deploymentconfig

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kcarretto/realm/tavern/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Cmd applies equality check predicate on the "cmd" field. It's identical to CmdEQ.
func Cmd(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCmd), v))
	})
}

// StartCmd applies equality check predicate on the "startCmd" field. It's identical to StartCmdEQ.
func StartCmd(v bool) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartCmd), v))
	})
}

// FileDst applies equality check predicate on the "fileDst" field. It's identical to FileDstEQ.
func FileDst(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileDst), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.DeploymentConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.DeploymentConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CmdEQ applies the EQ predicate on the "cmd" field.
func CmdEQ(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCmd), v))
	})
}

// CmdNEQ applies the NEQ predicate on the "cmd" field.
func CmdNEQ(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCmd), v))
	})
}

// CmdIn applies the In predicate on the "cmd" field.
func CmdIn(vs ...string) predicate.DeploymentConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCmd), v...))
	})
}

// CmdNotIn applies the NotIn predicate on the "cmd" field.
func CmdNotIn(vs ...string) predicate.DeploymentConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCmd), v...))
	})
}

// CmdGT applies the GT predicate on the "cmd" field.
func CmdGT(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCmd), v))
	})
}

// CmdGTE applies the GTE predicate on the "cmd" field.
func CmdGTE(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCmd), v))
	})
}

// CmdLT applies the LT predicate on the "cmd" field.
func CmdLT(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCmd), v))
	})
}

// CmdLTE applies the LTE predicate on the "cmd" field.
func CmdLTE(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCmd), v))
	})
}

// CmdContains applies the Contains predicate on the "cmd" field.
func CmdContains(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCmd), v))
	})
}

// CmdHasPrefix applies the HasPrefix predicate on the "cmd" field.
func CmdHasPrefix(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCmd), v))
	})
}

// CmdHasSuffix applies the HasSuffix predicate on the "cmd" field.
func CmdHasSuffix(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCmd), v))
	})
}

// CmdEqualFold applies the EqualFold predicate on the "cmd" field.
func CmdEqualFold(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCmd), v))
	})
}

// CmdContainsFold applies the ContainsFold predicate on the "cmd" field.
func CmdContainsFold(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCmd), v))
	})
}

// StartCmdEQ applies the EQ predicate on the "startCmd" field.
func StartCmdEQ(v bool) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartCmd), v))
	})
}

// StartCmdNEQ applies the NEQ predicate on the "startCmd" field.
func StartCmdNEQ(v bool) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartCmd), v))
	})
}

// FileDstEQ applies the EQ predicate on the "fileDst" field.
func FileDstEQ(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileDst), v))
	})
}

// FileDstNEQ applies the NEQ predicate on the "fileDst" field.
func FileDstNEQ(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileDst), v))
	})
}

// FileDstIn applies the In predicate on the "fileDst" field.
func FileDstIn(vs ...string) predicate.DeploymentConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFileDst), v...))
	})
}

// FileDstNotIn applies the NotIn predicate on the "fileDst" field.
func FileDstNotIn(vs ...string) predicate.DeploymentConfig {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFileDst), v...))
	})
}

// FileDstGT applies the GT predicate on the "fileDst" field.
func FileDstGT(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileDst), v))
	})
}

// FileDstGTE applies the GTE predicate on the "fileDst" field.
func FileDstGTE(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileDst), v))
	})
}

// FileDstLT applies the LT predicate on the "fileDst" field.
func FileDstLT(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileDst), v))
	})
}

// FileDstLTE applies the LTE predicate on the "fileDst" field.
func FileDstLTE(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileDst), v))
	})
}

// FileDstContains applies the Contains predicate on the "fileDst" field.
func FileDstContains(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFileDst), v))
	})
}

// FileDstHasPrefix applies the HasPrefix predicate on the "fileDst" field.
func FileDstHasPrefix(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFileDst), v))
	})
}

// FileDstHasSuffix applies the HasSuffix predicate on the "fileDst" field.
func FileDstHasSuffix(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFileDst), v))
	})
}

// FileDstEqualFold applies the EqualFold predicate on the "fileDst" field.
func FileDstEqualFold(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFileDst), v))
	})
}

// FileDstContainsFold applies the ContainsFold predicate on the "fileDst" field.
func FileDstContainsFold(v string) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFileDst), v))
	})
}

// HasDeployments applies the HasEdge predicate on the "deployments" edge.
func HasDeployments() predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeploymentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DeploymentsTable, DeploymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeploymentsWith applies the HasEdge predicate on the "deployments" edge with a given conditions (other predicates).
func HasDeploymentsWith(preds ...predicate.Deployment) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DeploymentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DeploymentsTable, DeploymentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFile applies the HasEdge predicate on the "file" edge.
func HasFile() predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FileTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FileTable, FileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileWith applies the HasEdge predicate on the "file" edge with a given conditions (other predicates).
func HasFileWith(preds ...predicate.File) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FileInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FileTable, FileColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImplantConfig applies the HasEdge predicate on the "implantConfig" edge.
func HasImplantConfig() predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ImplantConfigTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ImplantConfigTable, ImplantConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImplantConfigWith applies the HasEdge predicate on the "implantConfig" edge with a given conditions (other predicates).
func HasImplantConfigWith(preds ...predicate.ImplantConfig) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ImplantConfigInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ImplantConfigTable, ImplantConfigColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeploymentConfig) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeploymentConfig) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeploymentConfig) predicate.DeploymentConfig {
	return predicate.DeploymentConfig(func(s *sql.Selector) {
		p(s.Not())
	})
}
