// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/kcarretto/realm/tavern/ent/migrate"

	"github.com/kcarretto/realm/tavern/ent/credential"
	"github.com/kcarretto/realm/tavern/ent/deployment"
	"github.com/kcarretto/realm/tavern/ent/deploymentconfig"
	"github.com/kcarretto/realm/tavern/ent/file"
	"github.com/kcarretto/realm/tavern/ent/implant"
	"github.com/kcarretto/realm/tavern/ent/implantcallbackconfig"
	"github.com/kcarretto/realm/tavern/ent/implantconfig"
	"github.com/kcarretto/realm/tavern/ent/implantserviceconfig"
	"github.com/kcarretto/realm/tavern/ent/tag"
	"github.com/kcarretto/realm/tavern/ent/target"
	"github.com/kcarretto/realm/tavern/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Credential is the client for interacting with the Credential builders.
	Credential *CredentialClient
	// Deployment is the client for interacting with the Deployment builders.
	Deployment *DeploymentClient
	// DeploymentConfig is the client for interacting with the DeploymentConfig builders.
	DeploymentConfig *DeploymentConfigClient
	// File is the client for interacting with the File builders.
	File *FileClient
	// Implant is the client for interacting with the Implant builders.
	Implant *ImplantClient
	// ImplantCallbackConfig is the client for interacting with the ImplantCallbackConfig builders.
	ImplantCallbackConfig *ImplantCallbackConfigClient
	// ImplantConfig is the client for interacting with the ImplantConfig builders.
	ImplantConfig *ImplantConfigClient
	// ImplantServiceConfig is the client for interacting with the ImplantServiceConfig builders.
	ImplantServiceConfig *ImplantServiceConfigClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// Target is the client for interacting with the Target builders.
	Target *TargetClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Credential = NewCredentialClient(c.config)
	c.Deployment = NewDeploymentClient(c.config)
	c.DeploymentConfig = NewDeploymentConfigClient(c.config)
	c.File = NewFileClient(c.config)
	c.Implant = NewImplantClient(c.config)
	c.ImplantCallbackConfig = NewImplantCallbackConfigClient(c.config)
	c.ImplantConfig = NewImplantConfigClient(c.config)
	c.ImplantServiceConfig = NewImplantServiceConfigClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.Target = NewTargetClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Credential:            NewCredentialClient(cfg),
		Deployment:            NewDeploymentClient(cfg),
		DeploymentConfig:      NewDeploymentConfigClient(cfg),
		File:                  NewFileClient(cfg),
		Implant:               NewImplantClient(cfg),
		ImplantCallbackConfig: NewImplantCallbackConfigClient(cfg),
		ImplantConfig:         NewImplantConfigClient(cfg),
		ImplantServiceConfig:  NewImplantServiceConfigClient(cfg),
		Tag:                   NewTagClient(cfg),
		Target:                NewTargetClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Credential:            NewCredentialClient(cfg),
		Deployment:            NewDeploymentClient(cfg),
		DeploymentConfig:      NewDeploymentConfigClient(cfg),
		File:                  NewFileClient(cfg),
		Implant:               NewImplantClient(cfg),
		ImplantCallbackConfig: NewImplantCallbackConfigClient(cfg),
		ImplantConfig:         NewImplantConfigClient(cfg),
		ImplantServiceConfig:  NewImplantServiceConfigClient(cfg),
		Tag:                   NewTagClient(cfg),
		Target:                NewTargetClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Credential.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Credential.Use(hooks...)
	c.Deployment.Use(hooks...)
	c.DeploymentConfig.Use(hooks...)
	c.File.Use(hooks...)
	c.Implant.Use(hooks...)
	c.ImplantCallbackConfig.Use(hooks...)
	c.ImplantConfig.Use(hooks...)
	c.ImplantServiceConfig.Use(hooks...)
	c.Tag.Use(hooks...)
	c.Target.Use(hooks...)
	c.User.Use(hooks...)
}

// CredentialClient is a client for the Credential schema.
type CredentialClient struct {
	config
}

// NewCredentialClient returns a client for the Credential from the given config.
func NewCredentialClient(c config) *CredentialClient {
	return &CredentialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `credential.Hooks(f(g(h())))`.
func (c *CredentialClient) Use(hooks ...Hook) {
	c.hooks.Credential = append(c.hooks.Credential, hooks...)
}

// Create returns a create builder for Credential.
func (c *CredentialClient) Create() *CredentialCreate {
	mutation := newCredentialMutation(c.config, OpCreate)
	return &CredentialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Credential entities.
func (c *CredentialClient) CreateBulk(builders ...*CredentialCreate) *CredentialCreateBulk {
	return &CredentialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Credential.
func (c *CredentialClient) Update() *CredentialUpdate {
	mutation := newCredentialMutation(c.config, OpUpdate)
	return &CredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CredentialClient) UpdateOne(cr *Credential) *CredentialUpdateOne {
	mutation := newCredentialMutation(c.config, OpUpdateOne, withCredential(cr))
	return &CredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CredentialClient) UpdateOneID(id int) *CredentialUpdateOne {
	mutation := newCredentialMutation(c.config, OpUpdateOne, withCredentialID(id))
	return &CredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Credential.
func (c *CredentialClient) Delete() *CredentialDelete {
	mutation := newCredentialMutation(c.config, OpDelete)
	return &CredentialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CredentialClient) DeleteOne(cr *Credential) *CredentialDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CredentialClient) DeleteOneID(id int) *CredentialDeleteOne {
	builder := c.Delete().Where(credential.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CredentialDeleteOne{builder}
}

// Query returns a query builder for Credential.
func (c *CredentialClient) Query() *CredentialQuery {
	return &CredentialQuery{
		config: c.config,
	}
}

// Get returns a Credential entity by its id.
func (c *CredentialClient) Get(ctx context.Context, id int) (*Credential, error) {
	return c.Query().Where(credential.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CredentialClient) GetX(ctx context.Context, id int) *Credential {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTarget queries the target edge of a Credential.
func (c *CredentialClient) QueryTarget(cr *Credential) *TargetQuery {
	query := &TargetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(credential.Table, credential.FieldID, id),
			sqlgraph.To(target.Table, target.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, credential.TargetTable, credential.TargetColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CredentialClient) Hooks() []Hook {
	return c.hooks.Credential
}

// DeploymentClient is a client for the Deployment schema.
type DeploymentClient struct {
	config
}

// NewDeploymentClient returns a client for the Deployment from the given config.
func NewDeploymentClient(c config) *DeploymentClient {
	return &DeploymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deployment.Hooks(f(g(h())))`.
func (c *DeploymentClient) Use(hooks ...Hook) {
	c.hooks.Deployment = append(c.hooks.Deployment, hooks...)
}

// Create returns a create builder for Deployment.
func (c *DeploymentClient) Create() *DeploymentCreate {
	mutation := newDeploymentMutation(c.config, OpCreate)
	return &DeploymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Deployment entities.
func (c *DeploymentClient) CreateBulk(builders ...*DeploymentCreate) *DeploymentCreateBulk {
	return &DeploymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Deployment.
func (c *DeploymentClient) Update() *DeploymentUpdate {
	mutation := newDeploymentMutation(c.config, OpUpdate)
	return &DeploymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeploymentClient) UpdateOne(d *Deployment) *DeploymentUpdateOne {
	mutation := newDeploymentMutation(c.config, OpUpdateOne, withDeployment(d))
	return &DeploymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeploymentClient) UpdateOneID(id int) *DeploymentUpdateOne {
	mutation := newDeploymentMutation(c.config, OpUpdateOne, withDeploymentID(id))
	return &DeploymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Deployment.
func (c *DeploymentClient) Delete() *DeploymentDelete {
	mutation := newDeploymentMutation(c.config, OpDelete)
	return &DeploymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeploymentClient) DeleteOne(d *Deployment) *DeploymentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeploymentClient) DeleteOneID(id int) *DeploymentDeleteOne {
	builder := c.Delete().Where(deployment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeploymentDeleteOne{builder}
}

// Query returns a query builder for Deployment.
func (c *DeploymentClient) Query() *DeploymentQuery {
	return &DeploymentQuery{
		config: c.config,
	}
}

// Get returns a Deployment entity by its id.
func (c *DeploymentClient) Get(ctx context.Context, id int) (*Deployment, error) {
	return c.Query().Where(deployment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeploymentClient) GetX(ctx context.Context, id int) *Deployment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConfig queries the config edge of a Deployment.
func (c *DeploymentClient) QueryConfig(d *Deployment) *DeploymentConfigQuery {
	query := &DeploymentConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deployment.Table, deployment.FieldID, id),
			sqlgraph.To(deploymentconfig.Table, deploymentconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deployment.ConfigTable, deployment.ConfigColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTarget queries the target edge of a Deployment.
func (c *DeploymentClient) QueryTarget(d *Deployment) *TargetQuery {
	query := &TargetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deployment.Table, deployment.FieldID, id),
			sqlgraph.To(target.Table, target.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deployment.TargetTable, deployment.TargetColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeploymentClient) Hooks() []Hook {
	return c.hooks.Deployment
}

// DeploymentConfigClient is a client for the DeploymentConfig schema.
type DeploymentConfigClient struct {
	config
}

// NewDeploymentConfigClient returns a client for the DeploymentConfig from the given config.
func NewDeploymentConfigClient(c config) *DeploymentConfigClient {
	return &DeploymentConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deploymentconfig.Hooks(f(g(h())))`.
func (c *DeploymentConfigClient) Use(hooks ...Hook) {
	c.hooks.DeploymentConfig = append(c.hooks.DeploymentConfig, hooks...)
}

// Create returns a create builder for DeploymentConfig.
func (c *DeploymentConfigClient) Create() *DeploymentConfigCreate {
	mutation := newDeploymentConfigMutation(c.config, OpCreate)
	return &DeploymentConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeploymentConfig entities.
func (c *DeploymentConfigClient) CreateBulk(builders ...*DeploymentConfigCreate) *DeploymentConfigCreateBulk {
	return &DeploymentConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeploymentConfig.
func (c *DeploymentConfigClient) Update() *DeploymentConfigUpdate {
	mutation := newDeploymentConfigMutation(c.config, OpUpdate)
	return &DeploymentConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeploymentConfigClient) UpdateOne(dc *DeploymentConfig) *DeploymentConfigUpdateOne {
	mutation := newDeploymentConfigMutation(c.config, OpUpdateOne, withDeploymentConfig(dc))
	return &DeploymentConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeploymentConfigClient) UpdateOneID(id int) *DeploymentConfigUpdateOne {
	mutation := newDeploymentConfigMutation(c.config, OpUpdateOne, withDeploymentConfigID(id))
	return &DeploymentConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeploymentConfig.
func (c *DeploymentConfigClient) Delete() *DeploymentConfigDelete {
	mutation := newDeploymentConfigMutation(c.config, OpDelete)
	return &DeploymentConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeploymentConfigClient) DeleteOne(dc *DeploymentConfig) *DeploymentConfigDeleteOne {
	return c.DeleteOneID(dc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeploymentConfigClient) DeleteOneID(id int) *DeploymentConfigDeleteOne {
	builder := c.Delete().Where(deploymentconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeploymentConfigDeleteOne{builder}
}

// Query returns a query builder for DeploymentConfig.
func (c *DeploymentConfigClient) Query() *DeploymentConfigQuery {
	return &DeploymentConfigQuery{
		config: c.config,
	}
}

// Get returns a DeploymentConfig entity by its id.
func (c *DeploymentConfigClient) Get(ctx context.Context, id int) (*DeploymentConfig, error) {
	return c.Query().Where(deploymentconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeploymentConfigClient) GetX(ctx context.Context, id int) *DeploymentConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeployments queries the deployments edge of a DeploymentConfig.
func (c *DeploymentConfigClient) QueryDeployments(dc *DeploymentConfig) *DeploymentQuery {
	query := &DeploymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentconfig.Table, deploymentconfig.FieldID, id),
			sqlgraph.To(deployment.Table, deployment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, deploymentconfig.DeploymentsTable, deploymentconfig.DeploymentsColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFile queries the file edge of a DeploymentConfig.
func (c *DeploymentConfigClient) QueryFile(dc *DeploymentConfig) *FileQuery {
	query := &FileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentconfig.Table, deploymentconfig.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deploymentconfig.FileTable, deploymentconfig.FileColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImplantConfig queries the implantConfig edge of a DeploymentConfig.
func (c *DeploymentConfigClient) QueryImplantConfig(dc *DeploymentConfig) *ImplantConfigQuery {
	query := &ImplantConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deploymentconfig.Table, deploymentconfig.FieldID, id),
			sqlgraph.To(implantconfig.Table, implantconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deploymentconfig.ImplantConfigTable, deploymentconfig.ImplantConfigColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeploymentConfigClient) Hooks() []Hook {
	return c.hooks.DeploymentConfig
}

// FileClient is a client for the File schema.
type FileClient struct {
	config
}

// NewFileClient returns a client for the File from the given config.
func NewFileClient(c config) *FileClient {
	return &FileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `file.Hooks(f(g(h())))`.
func (c *FileClient) Use(hooks ...Hook) {
	c.hooks.File = append(c.hooks.File, hooks...)
}

// Create returns a create builder for File.
func (c *FileClient) Create() *FileCreate {
	mutation := newFileMutation(c.config, OpCreate)
	return &FileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of File entities.
func (c *FileClient) CreateBulk(builders ...*FileCreate) *FileCreateBulk {
	return &FileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for File.
func (c *FileClient) Update() *FileUpdate {
	mutation := newFileMutation(c.config, OpUpdate)
	return &FileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileClient) UpdateOne(f *File) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFile(f))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileClient) UpdateOneID(id int) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFileID(id))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for File.
func (c *FileClient) Delete() *FileDelete {
	mutation := newFileMutation(c.config, OpDelete)
	return &FileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FileClient) DeleteOne(f *File) *FileDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FileClient) DeleteOneID(id int) *FileDeleteOne {
	builder := c.Delete().Where(file.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileDeleteOne{builder}
}

// Query returns a query builder for File.
func (c *FileClient) Query() *FileQuery {
	return &FileQuery{
		config: c.config,
	}
}

// Get returns a File entity by its id.
func (c *FileClient) Get(ctx context.Context, id int) (*File, error) {
	return c.Query().Where(file.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileClient) GetX(ctx context.Context, id int) *File {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeploymentConfigs queries the deploymentConfigs edge of a File.
func (c *FileClient) QueryDeploymentConfigs(f *File) *DeploymentConfigQuery {
	query := &DeploymentConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(deploymentconfig.Table, deploymentconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, file.DeploymentConfigsTable, file.DeploymentConfigsColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FileClient) Hooks() []Hook {
	return c.hooks.File
}

// ImplantClient is a client for the Implant schema.
type ImplantClient struct {
	config
}

// NewImplantClient returns a client for the Implant from the given config.
func NewImplantClient(c config) *ImplantClient {
	return &ImplantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `implant.Hooks(f(g(h())))`.
func (c *ImplantClient) Use(hooks ...Hook) {
	c.hooks.Implant = append(c.hooks.Implant, hooks...)
}

// Create returns a create builder for Implant.
func (c *ImplantClient) Create() *ImplantCreate {
	mutation := newImplantMutation(c.config, OpCreate)
	return &ImplantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Implant entities.
func (c *ImplantClient) CreateBulk(builders ...*ImplantCreate) *ImplantCreateBulk {
	return &ImplantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Implant.
func (c *ImplantClient) Update() *ImplantUpdate {
	mutation := newImplantMutation(c.config, OpUpdate)
	return &ImplantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImplantClient) UpdateOne(i *Implant) *ImplantUpdateOne {
	mutation := newImplantMutation(c.config, OpUpdateOne, withImplant(i))
	return &ImplantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImplantClient) UpdateOneID(id int) *ImplantUpdateOne {
	mutation := newImplantMutation(c.config, OpUpdateOne, withImplantID(id))
	return &ImplantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Implant.
func (c *ImplantClient) Delete() *ImplantDelete {
	mutation := newImplantMutation(c.config, OpDelete)
	return &ImplantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ImplantClient) DeleteOne(i *Implant) *ImplantDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ImplantClient) DeleteOneID(id int) *ImplantDeleteOne {
	builder := c.Delete().Where(implant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImplantDeleteOne{builder}
}

// Query returns a query builder for Implant.
func (c *ImplantClient) Query() *ImplantQuery {
	return &ImplantQuery{
		config: c.config,
	}
}

// Get returns a Implant entity by its id.
func (c *ImplantClient) Get(ctx context.Context, id int) (*Implant, error) {
	return c.Query().Where(implant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImplantClient) GetX(ctx context.Context, id int) *Implant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTarget queries the target edge of a Implant.
func (c *ImplantClient) QueryTarget(i *Implant) *TargetQuery {
	query := &TargetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(implant.Table, implant.FieldID, id),
			sqlgraph.To(target.Table, target.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, implant.TargetTable, implant.TargetColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConfig queries the config edge of a Implant.
func (c *ImplantClient) QueryConfig(i *Implant) *ImplantConfigQuery {
	query := &ImplantConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(implant.Table, implant.FieldID, id),
			sqlgraph.To(implantconfig.Table, implantconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, implant.ConfigTable, implant.ConfigColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImplantClient) Hooks() []Hook {
	return c.hooks.Implant
}

// ImplantCallbackConfigClient is a client for the ImplantCallbackConfig schema.
type ImplantCallbackConfigClient struct {
	config
}

// NewImplantCallbackConfigClient returns a client for the ImplantCallbackConfig from the given config.
func NewImplantCallbackConfigClient(c config) *ImplantCallbackConfigClient {
	return &ImplantCallbackConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `implantcallbackconfig.Hooks(f(g(h())))`.
func (c *ImplantCallbackConfigClient) Use(hooks ...Hook) {
	c.hooks.ImplantCallbackConfig = append(c.hooks.ImplantCallbackConfig, hooks...)
}

// Create returns a create builder for ImplantCallbackConfig.
func (c *ImplantCallbackConfigClient) Create() *ImplantCallbackConfigCreate {
	mutation := newImplantCallbackConfigMutation(c.config, OpCreate)
	return &ImplantCallbackConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ImplantCallbackConfig entities.
func (c *ImplantCallbackConfigClient) CreateBulk(builders ...*ImplantCallbackConfigCreate) *ImplantCallbackConfigCreateBulk {
	return &ImplantCallbackConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ImplantCallbackConfig.
func (c *ImplantCallbackConfigClient) Update() *ImplantCallbackConfigUpdate {
	mutation := newImplantCallbackConfigMutation(c.config, OpUpdate)
	return &ImplantCallbackConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImplantCallbackConfigClient) UpdateOne(icc *ImplantCallbackConfig) *ImplantCallbackConfigUpdateOne {
	mutation := newImplantCallbackConfigMutation(c.config, OpUpdateOne, withImplantCallbackConfig(icc))
	return &ImplantCallbackConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImplantCallbackConfigClient) UpdateOneID(id int) *ImplantCallbackConfigUpdateOne {
	mutation := newImplantCallbackConfigMutation(c.config, OpUpdateOne, withImplantCallbackConfigID(id))
	return &ImplantCallbackConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ImplantCallbackConfig.
func (c *ImplantCallbackConfigClient) Delete() *ImplantCallbackConfigDelete {
	mutation := newImplantCallbackConfigMutation(c.config, OpDelete)
	return &ImplantCallbackConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ImplantCallbackConfigClient) DeleteOne(icc *ImplantCallbackConfig) *ImplantCallbackConfigDeleteOne {
	return c.DeleteOneID(icc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ImplantCallbackConfigClient) DeleteOneID(id int) *ImplantCallbackConfigDeleteOne {
	builder := c.Delete().Where(implantcallbackconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImplantCallbackConfigDeleteOne{builder}
}

// Query returns a query builder for ImplantCallbackConfig.
func (c *ImplantCallbackConfigClient) Query() *ImplantCallbackConfigQuery {
	return &ImplantCallbackConfigQuery{
		config: c.config,
	}
}

// Get returns a ImplantCallbackConfig entity by its id.
func (c *ImplantCallbackConfigClient) Get(ctx context.Context, id int) (*ImplantCallbackConfig, error) {
	return c.Query().Where(implantcallbackconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImplantCallbackConfigClient) GetX(ctx context.Context, id int) *ImplantCallbackConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryImplantConfigs queries the implantConfigs edge of a ImplantCallbackConfig.
func (c *ImplantCallbackConfigClient) QueryImplantConfigs(icc *ImplantCallbackConfig) *ImplantConfigQuery {
	query := &ImplantConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := icc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(implantcallbackconfig.Table, implantcallbackconfig.FieldID, id),
			sqlgraph.To(implantconfig.Table, implantconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, implantcallbackconfig.ImplantConfigsTable, implantcallbackconfig.ImplantConfigsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(icc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImplantCallbackConfigClient) Hooks() []Hook {
	return c.hooks.ImplantCallbackConfig
}

// ImplantConfigClient is a client for the ImplantConfig schema.
type ImplantConfigClient struct {
	config
}

// NewImplantConfigClient returns a client for the ImplantConfig from the given config.
func NewImplantConfigClient(c config) *ImplantConfigClient {
	return &ImplantConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `implantconfig.Hooks(f(g(h())))`.
func (c *ImplantConfigClient) Use(hooks ...Hook) {
	c.hooks.ImplantConfig = append(c.hooks.ImplantConfig, hooks...)
}

// Create returns a create builder for ImplantConfig.
func (c *ImplantConfigClient) Create() *ImplantConfigCreate {
	mutation := newImplantConfigMutation(c.config, OpCreate)
	return &ImplantConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ImplantConfig entities.
func (c *ImplantConfigClient) CreateBulk(builders ...*ImplantConfigCreate) *ImplantConfigCreateBulk {
	return &ImplantConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ImplantConfig.
func (c *ImplantConfigClient) Update() *ImplantConfigUpdate {
	mutation := newImplantConfigMutation(c.config, OpUpdate)
	return &ImplantConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImplantConfigClient) UpdateOne(ic *ImplantConfig) *ImplantConfigUpdateOne {
	mutation := newImplantConfigMutation(c.config, OpUpdateOne, withImplantConfig(ic))
	return &ImplantConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImplantConfigClient) UpdateOneID(id int) *ImplantConfigUpdateOne {
	mutation := newImplantConfigMutation(c.config, OpUpdateOne, withImplantConfigID(id))
	return &ImplantConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ImplantConfig.
func (c *ImplantConfigClient) Delete() *ImplantConfigDelete {
	mutation := newImplantConfigMutation(c.config, OpDelete)
	return &ImplantConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ImplantConfigClient) DeleteOne(ic *ImplantConfig) *ImplantConfigDeleteOne {
	return c.DeleteOneID(ic.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ImplantConfigClient) DeleteOneID(id int) *ImplantConfigDeleteOne {
	builder := c.Delete().Where(implantconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImplantConfigDeleteOne{builder}
}

// Query returns a query builder for ImplantConfig.
func (c *ImplantConfigClient) Query() *ImplantConfigQuery {
	return &ImplantConfigQuery{
		config: c.config,
	}
}

// Get returns a ImplantConfig entity by its id.
func (c *ImplantConfigClient) Get(ctx context.Context, id int) (*ImplantConfig, error) {
	return c.Query().Where(implantconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImplantConfigClient) GetX(ctx context.Context, id int) *ImplantConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeploymentConfigs queries the deploymentConfigs edge of a ImplantConfig.
func (c *ImplantConfigClient) QueryDeploymentConfigs(ic *ImplantConfig) *DeploymentConfigQuery {
	query := &DeploymentConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(implantconfig.Table, implantconfig.FieldID, id),
			sqlgraph.To(deploymentconfig.Table, deploymentconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, implantconfig.DeploymentConfigsTable, implantconfig.DeploymentConfigsColumn),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImplants queries the implants edge of a ImplantConfig.
func (c *ImplantConfigClient) QueryImplants(ic *ImplantConfig) *ImplantQuery {
	query := &ImplantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(implantconfig.Table, implantconfig.FieldID, id),
			sqlgraph.To(implant.Table, implant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, implantconfig.ImplantsTable, implantconfig.ImplantsColumn),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceConfigs queries the serviceConfigs edge of a ImplantConfig.
func (c *ImplantConfigClient) QueryServiceConfigs(ic *ImplantConfig) *ImplantServiceConfigQuery {
	query := &ImplantServiceConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(implantconfig.Table, implantconfig.FieldID, id),
			sqlgraph.To(implantserviceconfig.Table, implantserviceconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, implantconfig.ServiceConfigsTable, implantconfig.ServiceConfigsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCallbackConfigs queries the callbackConfigs edge of a ImplantConfig.
func (c *ImplantConfigClient) QueryCallbackConfigs(ic *ImplantConfig) *ImplantCallbackConfigQuery {
	query := &ImplantCallbackConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(implantconfig.Table, implantconfig.FieldID, id),
			sqlgraph.To(implantcallbackconfig.Table, implantcallbackconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, implantconfig.CallbackConfigsTable, implantconfig.CallbackConfigsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImplantConfigClient) Hooks() []Hook {
	return c.hooks.ImplantConfig
}

// ImplantServiceConfigClient is a client for the ImplantServiceConfig schema.
type ImplantServiceConfigClient struct {
	config
}

// NewImplantServiceConfigClient returns a client for the ImplantServiceConfig from the given config.
func NewImplantServiceConfigClient(c config) *ImplantServiceConfigClient {
	return &ImplantServiceConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `implantserviceconfig.Hooks(f(g(h())))`.
func (c *ImplantServiceConfigClient) Use(hooks ...Hook) {
	c.hooks.ImplantServiceConfig = append(c.hooks.ImplantServiceConfig, hooks...)
}

// Create returns a create builder for ImplantServiceConfig.
func (c *ImplantServiceConfigClient) Create() *ImplantServiceConfigCreate {
	mutation := newImplantServiceConfigMutation(c.config, OpCreate)
	return &ImplantServiceConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ImplantServiceConfig entities.
func (c *ImplantServiceConfigClient) CreateBulk(builders ...*ImplantServiceConfigCreate) *ImplantServiceConfigCreateBulk {
	return &ImplantServiceConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ImplantServiceConfig.
func (c *ImplantServiceConfigClient) Update() *ImplantServiceConfigUpdate {
	mutation := newImplantServiceConfigMutation(c.config, OpUpdate)
	return &ImplantServiceConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImplantServiceConfigClient) UpdateOne(isc *ImplantServiceConfig) *ImplantServiceConfigUpdateOne {
	mutation := newImplantServiceConfigMutation(c.config, OpUpdateOne, withImplantServiceConfig(isc))
	return &ImplantServiceConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImplantServiceConfigClient) UpdateOneID(id int) *ImplantServiceConfigUpdateOne {
	mutation := newImplantServiceConfigMutation(c.config, OpUpdateOne, withImplantServiceConfigID(id))
	return &ImplantServiceConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ImplantServiceConfig.
func (c *ImplantServiceConfigClient) Delete() *ImplantServiceConfigDelete {
	mutation := newImplantServiceConfigMutation(c.config, OpDelete)
	return &ImplantServiceConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ImplantServiceConfigClient) DeleteOne(isc *ImplantServiceConfig) *ImplantServiceConfigDeleteOne {
	return c.DeleteOneID(isc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ImplantServiceConfigClient) DeleteOneID(id int) *ImplantServiceConfigDeleteOne {
	builder := c.Delete().Where(implantserviceconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImplantServiceConfigDeleteOne{builder}
}

// Query returns a query builder for ImplantServiceConfig.
func (c *ImplantServiceConfigClient) Query() *ImplantServiceConfigQuery {
	return &ImplantServiceConfigQuery{
		config: c.config,
	}
}

// Get returns a ImplantServiceConfig entity by its id.
func (c *ImplantServiceConfigClient) Get(ctx context.Context, id int) (*ImplantServiceConfig, error) {
	return c.Query().Where(implantserviceconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImplantServiceConfigClient) GetX(ctx context.Context, id int) *ImplantServiceConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryImplantConfigs queries the implantConfigs edge of a ImplantServiceConfig.
func (c *ImplantServiceConfigClient) QueryImplantConfigs(isc *ImplantServiceConfig) *ImplantConfigQuery {
	query := &ImplantConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := isc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(implantserviceconfig.Table, implantserviceconfig.FieldID, id),
			sqlgraph.To(implantconfig.Table, implantconfig.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, implantserviceconfig.ImplantConfigsTable, implantserviceconfig.ImplantConfigsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(isc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImplantServiceConfigClient) Hooks() []Hook {
	return c.hooks.ImplantServiceConfig
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Create returns a create builder for Tag.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagClient) DeleteOneID(id int) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTargets queries the targets edge of a Tag.
func (c *TagClient) QueryTargets(t *Tag) *TargetQuery {
	query := &TargetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(target.Table, target.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tag.TargetsTable, tag.TargetsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// TargetClient is a client for the Target schema.
type TargetClient struct {
	config
}

// NewTargetClient returns a client for the Target from the given config.
func NewTargetClient(c config) *TargetClient {
	return &TargetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `target.Hooks(f(g(h())))`.
func (c *TargetClient) Use(hooks ...Hook) {
	c.hooks.Target = append(c.hooks.Target, hooks...)
}

// Create returns a create builder for Target.
func (c *TargetClient) Create() *TargetCreate {
	mutation := newTargetMutation(c.config, OpCreate)
	return &TargetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Target entities.
func (c *TargetClient) CreateBulk(builders ...*TargetCreate) *TargetCreateBulk {
	return &TargetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Target.
func (c *TargetClient) Update() *TargetUpdate {
	mutation := newTargetMutation(c.config, OpUpdate)
	return &TargetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TargetClient) UpdateOne(t *Target) *TargetUpdateOne {
	mutation := newTargetMutation(c.config, OpUpdateOne, withTarget(t))
	return &TargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TargetClient) UpdateOneID(id int) *TargetUpdateOne {
	mutation := newTargetMutation(c.config, OpUpdateOne, withTargetID(id))
	return &TargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Target.
func (c *TargetClient) Delete() *TargetDelete {
	mutation := newTargetMutation(c.config, OpDelete)
	return &TargetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TargetClient) DeleteOne(t *Target) *TargetDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TargetClient) DeleteOneID(id int) *TargetDeleteOne {
	builder := c.Delete().Where(target.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TargetDeleteOne{builder}
}

// Query returns a query builder for Target.
func (c *TargetClient) Query() *TargetQuery {
	return &TargetQuery{
		config: c.config,
	}
}

// Get returns a Target entity by its id.
func (c *TargetClient) Get(ctx context.Context, id int) (*Target, error) {
	return c.Query().Where(target.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TargetClient) GetX(ctx context.Context, id int) *Target {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryImplants queries the implants edge of a Target.
func (c *TargetClient) QueryImplants(t *Target) *ImplantQuery {
	query := &ImplantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(target.Table, target.FieldID, id),
			sqlgraph.To(implant.Table, implant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, target.ImplantsTable, target.ImplantsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeployments queries the deployments edge of a Target.
func (c *TargetClient) QueryDeployments(t *Target) *DeploymentQuery {
	query := &DeploymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(target.Table, target.FieldID, id),
			sqlgraph.To(deployment.Table, deployment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, target.DeploymentsTable, target.DeploymentsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCredentials queries the credentials edge of a Target.
func (c *TargetClient) QueryCredentials(t *Target) *CredentialQuery {
	query := &CredentialQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(target.Table, target.FieldID, id),
			sqlgraph.To(credential.Table, credential.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, target.CredentialsTable, target.CredentialsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a Target.
func (c *TargetClient) QueryTags(t *Target) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(target.Table, target.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, target.TagsTable, target.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TargetClient) Hooks() []Hook {
	return c.hooks.Target
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
