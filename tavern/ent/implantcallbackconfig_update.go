// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kcarretto/realm/tavern/ent/implantcallbackconfig"
	"github.com/kcarretto/realm/tavern/ent/implantconfig"
	"github.com/kcarretto/realm/tavern/ent/predicate"
)

// ImplantCallbackConfigUpdate is the builder for updating ImplantCallbackConfig entities.
type ImplantCallbackConfigUpdate struct {
	config
	hooks    []Hook
	mutation *ImplantCallbackConfigMutation
}

// Where appends a list predicates to the ImplantCallbackConfigUpdate builder.
func (iccu *ImplantCallbackConfigUpdate) Where(ps ...predicate.ImplantCallbackConfig) *ImplantCallbackConfigUpdate {
	iccu.mutation.Where(ps...)
	return iccu
}

// SetURI sets the "uri" field.
func (iccu *ImplantCallbackConfigUpdate) SetURI(s string) *ImplantCallbackConfigUpdate {
	iccu.mutation.SetURI(s)
	return iccu
}

// SetProxyURI sets the "proxyURI" field.
func (iccu *ImplantCallbackConfigUpdate) SetProxyURI(s string) *ImplantCallbackConfigUpdate {
	iccu.mutation.SetProxyURI(s)
	return iccu
}

// SetNillableProxyURI sets the "proxyURI" field if the given value is not nil.
func (iccu *ImplantCallbackConfigUpdate) SetNillableProxyURI(s *string) *ImplantCallbackConfigUpdate {
	if s != nil {
		iccu.SetProxyURI(*s)
	}
	return iccu
}

// ClearProxyURI clears the value of the "proxyURI" field.
func (iccu *ImplantCallbackConfigUpdate) ClearProxyURI() *ImplantCallbackConfigUpdate {
	iccu.mutation.ClearProxyURI()
	return iccu
}

// SetPriority sets the "priority" field.
func (iccu *ImplantCallbackConfigUpdate) SetPriority(i int) *ImplantCallbackConfigUpdate {
	iccu.mutation.ResetPriority()
	iccu.mutation.SetPriority(i)
	return iccu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (iccu *ImplantCallbackConfigUpdate) SetNillablePriority(i *int) *ImplantCallbackConfigUpdate {
	if i != nil {
		iccu.SetPriority(*i)
	}
	return iccu
}

// AddPriority adds i to the "priority" field.
func (iccu *ImplantCallbackConfigUpdate) AddPriority(i int) *ImplantCallbackConfigUpdate {
	iccu.mutation.AddPriority(i)
	return iccu
}

// SetTimeout sets the "timeout" field.
func (iccu *ImplantCallbackConfigUpdate) SetTimeout(i int) *ImplantCallbackConfigUpdate {
	iccu.mutation.ResetTimeout()
	iccu.mutation.SetTimeout(i)
	return iccu
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (iccu *ImplantCallbackConfigUpdate) SetNillableTimeout(i *int) *ImplantCallbackConfigUpdate {
	if i != nil {
		iccu.SetTimeout(*i)
	}
	return iccu
}

// AddTimeout adds i to the "timeout" field.
func (iccu *ImplantCallbackConfigUpdate) AddTimeout(i int) *ImplantCallbackConfigUpdate {
	iccu.mutation.AddTimeout(i)
	return iccu
}

// SetInterval sets the "interval" field.
func (iccu *ImplantCallbackConfigUpdate) SetInterval(i int) *ImplantCallbackConfigUpdate {
	iccu.mutation.ResetInterval()
	iccu.mutation.SetInterval(i)
	return iccu
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (iccu *ImplantCallbackConfigUpdate) SetNillableInterval(i *int) *ImplantCallbackConfigUpdate {
	if i != nil {
		iccu.SetInterval(*i)
	}
	return iccu
}

// AddInterval adds i to the "interval" field.
func (iccu *ImplantCallbackConfigUpdate) AddInterval(i int) *ImplantCallbackConfigUpdate {
	iccu.mutation.AddInterval(i)
	return iccu
}

// SetJitter sets the "jitter" field.
func (iccu *ImplantCallbackConfigUpdate) SetJitter(i int) *ImplantCallbackConfigUpdate {
	iccu.mutation.ResetJitter()
	iccu.mutation.SetJitter(i)
	return iccu
}

// SetNillableJitter sets the "jitter" field if the given value is not nil.
func (iccu *ImplantCallbackConfigUpdate) SetNillableJitter(i *int) *ImplantCallbackConfigUpdate {
	if i != nil {
		iccu.SetJitter(*i)
	}
	return iccu
}

// AddJitter adds i to the "jitter" field.
func (iccu *ImplantCallbackConfigUpdate) AddJitter(i int) *ImplantCallbackConfigUpdate {
	iccu.mutation.AddJitter(i)
	return iccu
}

// AddImplantConfigIDs adds the "implantConfigs" edge to the ImplantConfig entity by IDs.
func (iccu *ImplantCallbackConfigUpdate) AddImplantConfigIDs(ids ...int) *ImplantCallbackConfigUpdate {
	iccu.mutation.AddImplantConfigIDs(ids...)
	return iccu
}

// AddImplantConfigs adds the "implantConfigs" edges to the ImplantConfig entity.
func (iccu *ImplantCallbackConfigUpdate) AddImplantConfigs(i ...*ImplantConfig) *ImplantCallbackConfigUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iccu.AddImplantConfigIDs(ids...)
}

// Mutation returns the ImplantCallbackConfigMutation object of the builder.
func (iccu *ImplantCallbackConfigUpdate) Mutation() *ImplantCallbackConfigMutation {
	return iccu.mutation
}

// ClearImplantConfigs clears all "implantConfigs" edges to the ImplantConfig entity.
func (iccu *ImplantCallbackConfigUpdate) ClearImplantConfigs() *ImplantCallbackConfigUpdate {
	iccu.mutation.ClearImplantConfigs()
	return iccu
}

// RemoveImplantConfigIDs removes the "implantConfigs" edge to ImplantConfig entities by IDs.
func (iccu *ImplantCallbackConfigUpdate) RemoveImplantConfigIDs(ids ...int) *ImplantCallbackConfigUpdate {
	iccu.mutation.RemoveImplantConfigIDs(ids...)
	return iccu
}

// RemoveImplantConfigs removes "implantConfigs" edges to ImplantConfig entities.
func (iccu *ImplantCallbackConfigUpdate) RemoveImplantConfigs(i ...*ImplantConfig) *ImplantCallbackConfigUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iccu.RemoveImplantConfigIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iccu *ImplantCallbackConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iccu.hooks) == 0 {
		if err = iccu.check(); err != nil {
			return 0, err
		}
		affected, err = iccu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantCallbackConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iccu.check(); err != nil {
				return 0, err
			}
			iccu.mutation = mutation
			affected, err = iccu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iccu.hooks) - 1; i >= 0; i-- {
			if iccu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iccu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iccu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iccu *ImplantCallbackConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := iccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iccu *ImplantCallbackConfigUpdate) Exec(ctx context.Context) error {
	_, err := iccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccu *ImplantCallbackConfigUpdate) ExecX(ctx context.Context) {
	if err := iccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iccu *ImplantCallbackConfigUpdate) check() error {
	if v, ok := iccu.mutation.URI(); ok {
		if err := implantcallbackconfig.URIValidator(v); err != nil {
			return &ValidationError{Name: "uri", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.uri": %w`, err)}
		}
	}
	if v, ok := iccu.mutation.Priority(); ok {
		if err := implantcallbackconfig.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.priority": %w`, err)}
		}
	}
	if v, ok := iccu.mutation.Timeout(); ok {
		if err := implantcallbackconfig.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.timeout": %w`, err)}
		}
	}
	if v, ok := iccu.mutation.Interval(); ok {
		if err := implantcallbackconfig.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.interval": %w`, err)}
		}
	}
	if v, ok := iccu.mutation.Jitter(); ok {
		if err := implantcallbackconfig.JitterValidator(v); err != nil {
			return &ValidationError{Name: "jitter", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.jitter": %w`, err)}
		}
	}
	return nil
}

func (iccu *ImplantCallbackConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   implantcallbackconfig.Table,
			Columns: implantcallbackconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implantcallbackconfig.FieldID,
			},
		},
	}
	if ps := iccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iccu.mutation.URI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantcallbackconfig.FieldURI,
		})
	}
	if value, ok := iccu.mutation.ProxyURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantcallbackconfig.FieldProxyURI,
		})
	}
	if iccu.mutation.ProxyURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: implantcallbackconfig.FieldProxyURI,
		})
	}
	if value, ok := iccu.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldPriority,
		})
	}
	if value, ok := iccu.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldPriority,
		})
	}
	if value, ok := iccu.mutation.Timeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldTimeout,
		})
	}
	if value, ok := iccu.mutation.AddedTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldTimeout,
		})
	}
	if value, ok := iccu.mutation.Interval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldInterval,
		})
	}
	if value, ok := iccu.mutation.AddedInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldInterval,
		})
	}
	if value, ok := iccu.mutation.Jitter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldJitter,
		})
	}
	if value, ok := iccu.mutation.AddedJitter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldJitter,
		})
	}
	if iccu.mutation.ImplantConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantcallbackconfig.ImplantConfigsTable,
			Columns: implantcallbackconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iccu.mutation.RemovedImplantConfigsIDs(); len(nodes) > 0 && !iccu.mutation.ImplantConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantcallbackconfig.ImplantConfigsTable,
			Columns: implantcallbackconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iccu.mutation.ImplantConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantcallbackconfig.ImplantConfigsTable,
			Columns: implantcallbackconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{implantcallbackconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ImplantCallbackConfigUpdateOne is the builder for updating a single ImplantCallbackConfig entity.
type ImplantCallbackConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImplantCallbackConfigMutation
}

// SetURI sets the "uri" field.
func (iccuo *ImplantCallbackConfigUpdateOne) SetURI(s string) *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.SetURI(s)
	return iccuo
}

// SetProxyURI sets the "proxyURI" field.
func (iccuo *ImplantCallbackConfigUpdateOne) SetProxyURI(s string) *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.SetProxyURI(s)
	return iccuo
}

// SetNillableProxyURI sets the "proxyURI" field if the given value is not nil.
func (iccuo *ImplantCallbackConfigUpdateOne) SetNillableProxyURI(s *string) *ImplantCallbackConfigUpdateOne {
	if s != nil {
		iccuo.SetProxyURI(*s)
	}
	return iccuo
}

// ClearProxyURI clears the value of the "proxyURI" field.
func (iccuo *ImplantCallbackConfigUpdateOne) ClearProxyURI() *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.ClearProxyURI()
	return iccuo
}

// SetPriority sets the "priority" field.
func (iccuo *ImplantCallbackConfigUpdateOne) SetPriority(i int) *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.ResetPriority()
	iccuo.mutation.SetPriority(i)
	return iccuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (iccuo *ImplantCallbackConfigUpdateOne) SetNillablePriority(i *int) *ImplantCallbackConfigUpdateOne {
	if i != nil {
		iccuo.SetPriority(*i)
	}
	return iccuo
}

// AddPriority adds i to the "priority" field.
func (iccuo *ImplantCallbackConfigUpdateOne) AddPriority(i int) *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.AddPriority(i)
	return iccuo
}

// SetTimeout sets the "timeout" field.
func (iccuo *ImplantCallbackConfigUpdateOne) SetTimeout(i int) *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.ResetTimeout()
	iccuo.mutation.SetTimeout(i)
	return iccuo
}

// SetNillableTimeout sets the "timeout" field if the given value is not nil.
func (iccuo *ImplantCallbackConfigUpdateOne) SetNillableTimeout(i *int) *ImplantCallbackConfigUpdateOne {
	if i != nil {
		iccuo.SetTimeout(*i)
	}
	return iccuo
}

// AddTimeout adds i to the "timeout" field.
func (iccuo *ImplantCallbackConfigUpdateOne) AddTimeout(i int) *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.AddTimeout(i)
	return iccuo
}

// SetInterval sets the "interval" field.
func (iccuo *ImplantCallbackConfigUpdateOne) SetInterval(i int) *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.ResetInterval()
	iccuo.mutation.SetInterval(i)
	return iccuo
}

// SetNillableInterval sets the "interval" field if the given value is not nil.
func (iccuo *ImplantCallbackConfigUpdateOne) SetNillableInterval(i *int) *ImplantCallbackConfigUpdateOne {
	if i != nil {
		iccuo.SetInterval(*i)
	}
	return iccuo
}

// AddInterval adds i to the "interval" field.
func (iccuo *ImplantCallbackConfigUpdateOne) AddInterval(i int) *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.AddInterval(i)
	return iccuo
}

// SetJitter sets the "jitter" field.
func (iccuo *ImplantCallbackConfigUpdateOne) SetJitter(i int) *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.ResetJitter()
	iccuo.mutation.SetJitter(i)
	return iccuo
}

// SetNillableJitter sets the "jitter" field if the given value is not nil.
func (iccuo *ImplantCallbackConfigUpdateOne) SetNillableJitter(i *int) *ImplantCallbackConfigUpdateOne {
	if i != nil {
		iccuo.SetJitter(*i)
	}
	return iccuo
}

// AddJitter adds i to the "jitter" field.
func (iccuo *ImplantCallbackConfigUpdateOne) AddJitter(i int) *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.AddJitter(i)
	return iccuo
}

// AddImplantConfigIDs adds the "implantConfigs" edge to the ImplantConfig entity by IDs.
func (iccuo *ImplantCallbackConfigUpdateOne) AddImplantConfigIDs(ids ...int) *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.AddImplantConfigIDs(ids...)
	return iccuo
}

// AddImplantConfigs adds the "implantConfigs" edges to the ImplantConfig entity.
func (iccuo *ImplantCallbackConfigUpdateOne) AddImplantConfigs(i ...*ImplantConfig) *ImplantCallbackConfigUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iccuo.AddImplantConfigIDs(ids...)
}

// Mutation returns the ImplantCallbackConfigMutation object of the builder.
func (iccuo *ImplantCallbackConfigUpdateOne) Mutation() *ImplantCallbackConfigMutation {
	return iccuo.mutation
}

// ClearImplantConfigs clears all "implantConfigs" edges to the ImplantConfig entity.
func (iccuo *ImplantCallbackConfigUpdateOne) ClearImplantConfigs() *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.ClearImplantConfigs()
	return iccuo
}

// RemoveImplantConfigIDs removes the "implantConfigs" edge to ImplantConfig entities by IDs.
func (iccuo *ImplantCallbackConfigUpdateOne) RemoveImplantConfigIDs(ids ...int) *ImplantCallbackConfigUpdateOne {
	iccuo.mutation.RemoveImplantConfigIDs(ids...)
	return iccuo
}

// RemoveImplantConfigs removes "implantConfigs" edges to ImplantConfig entities.
func (iccuo *ImplantCallbackConfigUpdateOne) RemoveImplantConfigs(i ...*ImplantConfig) *ImplantCallbackConfigUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iccuo.RemoveImplantConfigIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iccuo *ImplantCallbackConfigUpdateOne) Select(field string, fields ...string) *ImplantCallbackConfigUpdateOne {
	iccuo.fields = append([]string{field}, fields...)
	return iccuo
}

// Save executes the query and returns the updated ImplantCallbackConfig entity.
func (iccuo *ImplantCallbackConfigUpdateOne) Save(ctx context.Context) (*ImplantCallbackConfig, error) {
	var (
		err  error
		node *ImplantCallbackConfig
	)
	if len(iccuo.hooks) == 0 {
		if err = iccuo.check(); err != nil {
			return nil, err
		}
		node, err = iccuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantCallbackConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iccuo.check(); err != nil {
				return nil, err
			}
			iccuo.mutation = mutation
			node, err = iccuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iccuo.hooks) - 1; i >= 0; i-- {
			if iccuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iccuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iccuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iccuo *ImplantCallbackConfigUpdateOne) SaveX(ctx context.Context) *ImplantCallbackConfig {
	node, err := iccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iccuo *ImplantCallbackConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := iccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccuo *ImplantCallbackConfigUpdateOne) ExecX(ctx context.Context) {
	if err := iccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iccuo *ImplantCallbackConfigUpdateOne) check() error {
	if v, ok := iccuo.mutation.URI(); ok {
		if err := implantcallbackconfig.URIValidator(v); err != nil {
			return &ValidationError{Name: "uri", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.uri": %w`, err)}
		}
	}
	if v, ok := iccuo.mutation.Priority(); ok {
		if err := implantcallbackconfig.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.priority": %w`, err)}
		}
	}
	if v, ok := iccuo.mutation.Timeout(); ok {
		if err := implantcallbackconfig.TimeoutValidator(v); err != nil {
			return &ValidationError{Name: "timeout", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.timeout": %w`, err)}
		}
	}
	if v, ok := iccuo.mutation.Interval(); ok {
		if err := implantcallbackconfig.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.interval": %w`, err)}
		}
	}
	if v, ok := iccuo.mutation.Jitter(); ok {
		if err := implantcallbackconfig.JitterValidator(v); err != nil {
			return &ValidationError{Name: "jitter", err: fmt.Errorf(`ent: validator failed for field "ImplantCallbackConfig.jitter": %w`, err)}
		}
	}
	return nil
}

func (iccuo *ImplantCallbackConfigUpdateOne) sqlSave(ctx context.Context) (_node *ImplantCallbackConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   implantcallbackconfig.Table,
			Columns: implantcallbackconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implantcallbackconfig.FieldID,
			},
		},
	}
	id, ok := iccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImplantCallbackConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, implantcallbackconfig.FieldID)
		for _, f := range fields {
			if !implantcallbackconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != implantcallbackconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iccuo.mutation.URI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantcallbackconfig.FieldURI,
		})
	}
	if value, ok := iccuo.mutation.ProxyURI(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implantcallbackconfig.FieldProxyURI,
		})
	}
	if iccuo.mutation.ProxyURICleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: implantcallbackconfig.FieldProxyURI,
		})
	}
	if value, ok := iccuo.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldPriority,
		})
	}
	if value, ok := iccuo.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldPriority,
		})
	}
	if value, ok := iccuo.mutation.Timeout(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldTimeout,
		})
	}
	if value, ok := iccuo.mutation.AddedTimeout(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldTimeout,
		})
	}
	if value, ok := iccuo.mutation.Interval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldInterval,
		})
	}
	if value, ok := iccuo.mutation.AddedInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldInterval,
		})
	}
	if value, ok := iccuo.mutation.Jitter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldJitter,
		})
	}
	if value, ok := iccuo.mutation.AddedJitter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: implantcallbackconfig.FieldJitter,
		})
	}
	if iccuo.mutation.ImplantConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantcallbackconfig.ImplantConfigsTable,
			Columns: implantcallbackconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iccuo.mutation.RemovedImplantConfigsIDs(); len(nodes) > 0 && !iccuo.mutation.ImplantConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantcallbackconfig.ImplantConfigsTable,
			Columns: implantcallbackconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iccuo.mutation.ImplantConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   implantcallbackconfig.ImplantConfigsTable,
			Columns: implantcallbackconfig.ImplantConfigsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implantconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImplantCallbackConfig{config: iccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{implantcallbackconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
