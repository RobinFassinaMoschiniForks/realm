// Code generated by entc, DO NOT EDIT.

package implant

const (
	// Label holds the string label denoting the implant type in the database.
	Label = "implant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSessionID holds the string denoting the sessionid field in the database.
	FieldSessionID = "session_id"
	// FieldProcessName holds the string denoting the processname field in the database.
	FieldProcessName = "process_name"
	// EdgeTarget holds the string denoting the target edge name in mutations.
	EdgeTarget = "target"
	// EdgeConfig holds the string denoting the config edge name in mutations.
	EdgeConfig = "config"
	// Table holds the table name of the implant in the database.
	Table = "implants"
	// TargetTable is the table that holds the target relation/edge.
	TargetTable = "implants"
	// TargetInverseTable is the table name for the Target entity.
	// It exists in this package in order to avoid circular dependency with the "target" package.
	TargetInverseTable = "targets"
	// TargetColumn is the table column denoting the target relation/edge.
	TargetColumn = "implant_target"
	// ConfigTable is the table that holds the config relation/edge.
	ConfigTable = "implants"
	// ConfigInverseTable is the table name for the ImplantConfig entity.
	// It exists in this package in order to avoid circular dependency with the "implantconfig" package.
	ConfigInverseTable = "implant_configs"
	// ConfigColumn is the table column denoting the config relation/edge.
	ConfigColumn = "implant_config"
)

// Columns holds all SQL columns for implant fields.
var Columns = []string{
	FieldID,
	FieldSessionID,
	FieldProcessName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "implants"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"implant_target",
	"implant_config",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// SessionIDValidator is a validator for the "sessionID" field. It is called by the builders before save.
	SessionIDValidator func(string) error
)
