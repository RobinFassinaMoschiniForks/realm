// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/kcarretto/realm/tavern/ent/implantserviceconfig"
)

// ImplantServiceConfig is the model entity for the ImplantServiceConfig schema.
type ImplantServiceConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	// The name of the service.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	// A description of the service.
	Description string `json:"description,omitempty"`
	// ExecutablePath holds the value of the "executablePath" field.
	// Path to the executable run by the service.
	ExecutablePath string `json:"executablePath,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImplantServiceConfigQuery when eager-loading is set.
	Edges ImplantServiceConfigEdges `json:"edges"`
}

// ImplantServiceConfigEdges holds the relations/edges for other nodes in the graph.
type ImplantServiceConfigEdges struct {
	// ImplantConfigs holds the value of the implantConfigs edge.
	ImplantConfigs []*ImplantConfig `json:"implantConfigs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ImplantConfigsOrErr returns the ImplantConfigs value or an error if the edge
// was not loaded in eager-loading.
func (e ImplantServiceConfigEdges) ImplantConfigsOrErr() ([]*ImplantConfig, error) {
	if e.loadedTypes[0] {
		return e.ImplantConfigs, nil
	}
	return nil, &NotLoadedError{edge: "implantConfigs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImplantServiceConfig) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case implantserviceconfig.FieldID:
			values[i] = new(sql.NullInt64)
		case implantserviceconfig.FieldName, implantserviceconfig.FieldDescription, implantserviceconfig.FieldExecutablePath:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ImplantServiceConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImplantServiceConfig fields.
func (isc *ImplantServiceConfig) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case implantserviceconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			isc.ID = int(value.Int64)
		case implantserviceconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				isc.Name = value.String
			}
		case implantserviceconfig.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				isc.Description = value.String
			}
		case implantserviceconfig.FieldExecutablePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field executablePath", values[i])
			} else if value.Valid {
				isc.ExecutablePath = value.String
			}
		}
	}
	return nil
}

// QueryImplantConfigs queries the "implantConfigs" edge of the ImplantServiceConfig entity.
func (isc *ImplantServiceConfig) QueryImplantConfigs() *ImplantConfigQuery {
	return (&ImplantServiceConfigClient{config: isc.config}).QueryImplantConfigs(isc)
}

// Update returns a builder for updating this ImplantServiceConfig.
// Note that you need to call ImplantServiceConfig.Unwrap() before calling this method if this ImplantServiceConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (isc *ImplantServiceConfig) Update() *ImplantServiceConfigUpdateOne {
	return (&ImplantServiceConfigClient{config: isc.config}).UpdateOne(isc)
}

// Unwrap unwraps the ImplantServiceConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (isc *ImplantServiceConfig) Unwrap() *ImplantServiceConfig {
	tx, ok := isc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ImplantServiceConfig is not a transactional entity")
	}
	isc.config.driver = tx.drv
	return isc
}

// String implements the fmt.Stringer.
func (isc *ImplantServiceConfig) String() string {
	var builder strings.Builder
	builder.WriteString("ImplantServiceConfig(")
	builder.WriteString(fmt.Sprintf("id=%v", isc.ID))
	builder.WriteString(", name=")
	builder.WriteString(isc.Name)
	builder.WriteString(", description=")
	builder.WriteString(isc.Description)
	builder.WriteString(", executablePath=")
	builder.WriteString(isc.ExecutablePath)
	builder.WriteByte(')')
	return builder.String()
}

// ImplantServiceConfigs is a parsable slice of ImplantServiceConfig.
type ImplantServiceConfigs []*ImplantServiceConfig

func (isc ImplantServiceConfigs) config(cfg config) {
	for _i := range isc {
		isc[_i].config = cfg
	}
}
