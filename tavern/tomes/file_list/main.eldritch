usernfo = sys.get_user()
PERM_READ = 4

name = {
    "Directory": "Dir",
    "File": "File",
    "Link": "Link"
}

def can_read(f):
    """Return true if the user can read this dir/file
    """
    f_user = int(f["permissions"][-3]) # User byte
    f_group = int(f["permissions"][-2]) # Group byte
    f_world = int(f["permissions"][-1]) # World byte applies to everyone

    # Are we root?
    root = usernfo["euid"]["uid"] == 0
    
    # If the user isnt root and the user doesnt own the file, clear the user byte   
    if not root and f["owner"] not in (usernfo["euid"]["name"], usernfo["uid"]["name"]):
        f_user = 0
    
    # TODO: https://github.com/spellshift/realm/issues/570
    # Will NOT match any group other than primary until #570 is fixed

    # If the user isnt root and the group doesnt own the file, clear the group byte    
    if not root and f["group"] not in (str(usernfo["egid"]), str(usernfo["gid"])):
        f_group = 0

    if PERM_READ in (f_world & PERM_READ, f_group & PERM_READ, f_user & PERM_READ):
        return True
    
    return False

def file_list(path, recurse=1, ignore_dirs=[]):
    """List all files in the given path up to <recurse>"""
    # TODO: https://github.com/spellshift/realm/issues/569
    # No way to get perms of a path, so this will crash if the initial path is unreadable
    # if not can_read(path): return

    if file.is_dir(path):
        for f in file.list(path):
            full = path.rstrip("/") + "/" + f["file_name"]
            if f["type"] == "Directory":
                full += "/"
            print(f['permissions']+"\t"+f['owner']+"\t"+f['group']+"\t"+str(f['size'])+"\t"+f['modified']+"\t"+name.get(f['type'], f['type'])+"\t"+full+"\n")
            if f["type"] == "Directory" and recurse-1 > 0:
                # Skip files we cant read
                if not can_read(f): continue
                file_list(full, recurse=recurse-1, ignore_dirs=ignore_dirs)
    else:
        print("Error: Invalid Path ("+path+"), is a regular file\n")

#input_params = {"path": "/tmp","depth": "0"} # Uncomment to test
# TODO: Is there any way to validate 'depth' is an int?

print("PERM\tUSER\tGROUP\tSIZE\tTIME\tTYPE\tPATH\n")
file_list(input_params['path'], recurse=int(input_params.get('depth', "1")))
print("\n")
print("\n")
